/* automatically generated by rust-bindgen 0.69.1 */

#![allow(clippy::all)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]
#![allow(dead_code)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const HPDF_MAJOR_VERSION: u32 = 2;
pub const HPDF_MINOR_VERSION: u32 = 4;
pub const HPDF_BUGFIX_VERSION: u32 = 4;
pub const HPDF_EXTRA_VERSION: &[u8; 1] = b"\0";
pub const HPDF_VERSION_ID: u32 = 20404;
pub const HPDF_TRUE: u32 = 1;
pub const HPDF_FALSE: u32 = 0;
pub const HPDF_OK: u32 = 0;
pub const HPDF_NOERROR: u32 = 0;
pub const HPDF_TMP_BUF_SIZ: u32 = 512;
pub const HPDF_SHORT_BUF_SIZ: u32 = 32;
pub const HPDF_REAL_LEN: u32 = 64;
pub const HPDF_INT_LEN: u32 = 11;
pub const HPDF_TEXT_DEFAULT_LEN: u32 = 256;
pub const HPDF_UNICODE_HEADER_LEN: u32 = 2;
pub const HPDF_DATE_TIME_STR_LEN: u32 = 23;
pub const HPDF_BYTE_OFFSET_LEN: u32 = 10;
pub const HPDF_OBJ_ID_LEN: u32 = 7;
pub const HPDF_GEN_NO_LEN: u32 = 5;
pub const HPDF_DEF_FONT: &[u8; 10] = b"Helvetica\0";
pub const HPDF_DEF_WORDSPACE: u32 = 0;
pub const HPDF_DEF_CHARSPACE: u32 = 0;
pub const HPDF_DEF_FONTSIZE: u32 = 10;
pub const HPDF_DEF_HSCALING: u32 = 100;
pub const HPDF_DEF_LEADING: u32 = 0;
pub const HPDF_DEF_RISE: u32 = 0;
pub const HPDF_DEF_RAISE: u32 = 0;
pub const HPDF_DEF_LINEWIDTH: u32 = 1;
pub const HPDF_DEF_MITERLIMIT: u32 = 10;
pub const HPDF_DEF_FLATNESS: u32 = 1;
pub const HPDF_DEF_PAGE_NUM: u32 = 1;
pub const HPDF_BS_DEF_WIDTH: u32 = 1;
pub const HPDF_DEF_PAGE_WIDTH: f64 = 595.276;
pub const HPDF_DEF_PAGE_HEIGHT: f64 = 841.89;
pub const HPDF_COMP_NONE: u32 = 0;
pub const HPDF_COMP_TEXT: u32 = 1;
pub const HPDF_COMP_IMAGE: u32 = 2;
pub const HPDF_COMP_METADATA: u32 = 4;
pub const HPDF_COMP_ALL: u32 = 15;
pub const HPDF_COMP_MASK: u32 = 255;
pub const HPDF_ENABLE_READ: u32 = 0;
pub const HPDF_ENABLE_PRINT: u32 = 4;
pub const HPDF_ENABLE_EDIT_ALL: u32 = 8;
pub const HPDF_ENABLE_COPY: u32 = 16;
pub const HPDF_ENABLE_EDIT: u32 = 32;
pub const HPDF_HIDE_TOOLBAR: u32 = 1;
pub const HPDF_HIDE_MENUBAR: u32 = 2;
pub const HPDF_HIDE_WINDOW_UI: u32 = 4;
pub const HPDF_FIT_WINDOW: u32 = 8;
pub const HPDF_CENTER_WINDOW: u32 = 16;
pub const HPDF_PRINT_SCALING_NONE: u32 = 32;
pub const HPDF_LIMIT_MAX_INT: u32 = 2147483647;
pub const HPDF_LIMIT_MIN_INT: i32 = -2147483647;
pub const HPDF_LIMIT_MAX_STRING_LEN: u32 = 2147483646;
pub const HPDF_LIMIT_MAX_NAME_LEN: u32 = 127;
pub const HPDF_LIMIT_MAX_ARRAY: u32 = 8388607;
pub const HPDF_LIMIT_MAX_DICT_ELEMENT: u32 = 8388607;
pub const HPDF_LIMIT_MAX_XREF_ELEMENT: u32 = 8388607;
pub const HPDF_LIMIT_MAX_GSTATE: u32 = 28;
pub const HPDF_LIMIT_MAX_DEVICE_N: u32 = 8;
pub const HPDF_LIMIT_MAX_DEVICE_N_V15: u32 = 32;
pub const HPDF_LIMIT_MAX_CID: u32 = 65535;
pub const HPDF_MAX_GENERATION_NUM: u32 = 65535;
pub const HPDF_MIN_PAGE_HEIGHT: u32 = 3;
pub const HPDF_MIN_PAGE_WIDTH: u32 = 3;
pub const HPDF_MAX_PAGE_HEIGHT: u32 = 14400;
pub const HPDF_MAX_PAGE_WIDTH: u32 = 14400;
pub const HPDF_MIN_MAGNIFICATION_FACTOR: u32 = 8;
pub const HPDF_MAX_MAGNIFICATION_FACTOR: u32 = 3200;
pub const HPDF_MIN_PAGE_SIZE: u32 = 3;
pub const HPDF_MAX_PAGE_SIZE: u32 = 14400;
pub const HPDF_MIN_HORIZONTALSCALING: u32 = 10;
pub const HPDF_MAX_HORIZONTALSCALING: u32 = 300;
pub const HPDF_MIN_WORDSPACE: i32 = -30;
pub const HPDF_MAX_WORDSPACE: u32 = 300;
pub const HPDF_MIN_CHARSPACE: i32 = -30;
pub const HPDF_MAX_CHARSPACE: u32 = 300;
pub const HPDF_MAX_FONTSIZE: u32 = 600;
pub const HPDF_MAX_ZOOMSIZE: u32 = 10;
pub const HPDF_MAX_LEADING: u32 = 300;
pub const HPDF_MAX_LINEWIDTH: u32 = 100;
pub const HPDF_MAX_DASH_PATTERN: u32 = 100;
pub const HPDF_MAX_JWW_NUM: u32 = 128;
pub const HPDF_COUNTRY_AF: &[u8; 3] = b"AF\0";
pub const HPDF_COUNTRY_AL: &[u8; 3] = b"AL\0";
pub const HPDF_COUNTRY_DZ: &[u8; 3] = b"DZ\0";
pub const HPDF_COUNTRY_AS: &[u8; 3] = b"AS\0";
pub const HPDF_COUNTRY_AD: &[u8; 3] = b"AD\0";
pub const HPDF_COUNTRY_AO: &[u8; 3] = b"AO\0";
pub const HPDF_COUNTRY_AI: &[u8; 3] = b"AI\0";
pub const HPDF_COUNTRY_AQ: &[u8; 3] = b"AQ\0";
pub const HPDF_COUNTRY_AG: &[u8; 3] = b"AG\0";
pub const HPDF_COUNTRY_AR: &[u8; 3] = b"AR\0";
pub const HPDF_COUNTRY_AM: &[u8; 3] = b"AM\0";
pub const HPDF_COUNTRY_AW: &[u8; 3] = b"AW\0";
pub const HPDF_COUNTRY_AU: &[u8; 3] = b"AU\0";
pub const HPDF_COUNTRY_AT: &[u8; 3] = b"AT\0";
pub const HPDF_COUNTRY_AZ: &[u8; 3] = b"AZ\0";
pub const HPDF_COUNTRY_BS: &[u8; 3] = b"BS\0";
pub const HPDF_COUNTRY_BH: &[u8; 3] = b"BH\0";
pub const HPDF_COUNTRY_BD: &[u8; 3] = b"BD\0";
pub const HPDF_COUNTRY_BB: &[u8; 3] = b"BB\0";
pub const HPDF_COUNTRY_BY: &[u8; 3] = b"BY\0";
pub const HPDF_COUNTRY_BE: &[u8; 3] = b"BE\0";
pub const HPDF_COUNTRY_BZ: &[u8; 3] = b"BZ\0";
pub const HPDF_COUNTRY_BJ: &[u8; 3] = b"BJ\0";
pub const HPDF_COUNTRY_BM: &[u8; 3] = b"BM\0";
pub const HPDF_COUNTRY_BT: &[u8; 3] = b"BT\0";
pub const HPDF_COUNTRY_BO: &[u8; 3] = b"BO\0";
pub const HPDF_COUNTRY_BA: &[u8; 3] = b"BA\0";
pub const HPDF_COUNTRY_BW: &[u8; 3] = b"BW\0";
pub const HPDF_COUNTRY_BV: &[u8; 3] = b"BV\0";
pub const HPDF_COUNTRY_BR: &[u8; 3] = b"BR\0";
pub const HPDF_COUNTRY_IO: &[u8; 3] = b"IO\0";
pub const HPDF_COUNTRY_BN: &[u8; 3] = b"BN\0";
pub const HPDF_COUNTRY_BG: &[u8; 3] = b"BG\0";
pub const HPDF_COUNTRY_BF: &[u8; 3] = b"BF\0";
pub const HPDF_COUNTRY_BI: &[u8; 3] = b"BI\0";
pub const HPDF_COUNTRY_KH: &[u8; 3] = b"KH\0";
pub const HPDF_COUNTRY_CM: &[u8; 3] = b"CM\0";
pub const HPDF_COUNTRY_CA: &[u8; 3] = b"CA\0";
pub const HPDF_COUNTRY_CV: &[u8; 3] = b"CV\0";
pub const HPDF_COUNTRY_KY: &[u8; 3] = b"KY\0";
pub const HPDF_COUNTRY_CF: &[u8; 3] = b"CF\0";
pub const HPDF_COUNTRY_TD: &[u8; 3] = b"TD\0";
pub const HPDF_COUNTRY_CL: &[u8; 3] = b"CL\0";
pub const HPDF_COUNTRY_CN: &[u8; 3] = b"CN\0";
pub const HPDF_COUNTRY_CX: &[u8; 3] = b"CX\0";
pub const HPDF_COUNTRY_CC: &[u8; 3] = b"CC\0";
pub const HPDF_COUNTRY_CO: &[u8; 3] = b"CO\0";
pub const HPDF_COUNTRY_KM: &[u8; 3] = b"KM\0";
pub const HPDF_COUNTRY_CG: &[u8; 3] = b"CG\0";
pub const HPDF_COUNTRY_CK: &[u8; 3] = b"CK\0";
pub const HPDF_COUNTRY_CR: &[u8; 3] = b"CR\0";
pub const HPDF_COUNTRY_CI: &[u8; 3] = b"CI\0";
pub const HPDF_COUNTRY_HR: &[u8; 3] = b"HR\0";
pub const HPDF_COUNTRY_CU: &[u8; 3] = b"CU\0";
pub const HPDF_COUNTRY_CY: &[u8; 3] = b"CY\0";
pub const HPDF_COUNTRY_CZ: &[u8; 3] = b"CZ\0";
pub const HPDF_COUNTRY_DK: &[u8; 3] = b"DK\0";
pub const HPDF_COUNTRY_DJ: &[u8; 3] = b"DJ\0";
pub const HPDF_COUNTRY_DM: &[u8; 3] = b"DM\0";
pub const HPDF_COUNTRY_DO: &[u8; 3] = b"DO\0";
pub const HPDF_COUNTRY_TP: &[u8; 3] = b"TP\0";
pub const HPDF_COUNTRY_EC: &[u8; 3] = b"EC\0";
pub const HPDF_COUNTRY_EG: &[u8; 3] = b"EG\0";
pub const HPDF_COUNTRY_SV: &[u8; 3] = b"SV\0";
pub const HPDF_COUNTRY_GQ: &[u8; 3] = b"GQ\0";
pub const HPDF_COUNTRY_ER: &[u8; 3] = b"ER\0";
pub const HPDF_COUNTRY_EE: &[u8; 3] = b"EE\0";
pub const HPDF_COUNTRY_ET: &[u8; 3] = b"ET\0";
pub const HPDF_COUNTRY_FK: &[u8; 3] = b"FK\0";
pub const HPDF_COUNTRY_FO: &[u8; 3] = b"FO\0";
pub const HPDF_COUNTRY_FJ: &[u8; 3] = b"FJ\0";
pub const HPDF_COUNTRY_FI: &[u8; 3] = b"FI\0";
pub const HPDF_COUNTRY_FR: &[u8; 3] = b"FR\0";
pub const HPDF_COUNTRY_FX: &[u8; 3] = b"FX\0";
pub const HPDF_COUNTRY_GF: &[u8; 3] = b"GF\0";
pub const HPDF_COUNTRY_PF: &[u8; 3] = b"PF\0";
pub const HPDF_COUNTRY_TF: &[u8; 3] = b"TF\0";
pub const HPDF_COUNTRY_GA: &[u8; 3] = b"GA\0";
pub const HPDF_COUNTRY_GM: &[u8; 3] = b"GM\0";
pub const HPDF_COUNTRY_GE: &[u8; 3] = b"GE\0";
pub const HPDF_COUNTRY_DE: &[u8; 3] = b"DE\0";
pub const HPDF_COUNTRY_GH: &[u8; 3] = b"GH\0";
pub const HPDF_COUNTRY_GI: &[u8; 3] = b"GI\0";
pub const HPDF_COUNTRY_GR: &[u8; 3] = b"GR\0";
pub const HPDF_COUNTRY_GL: &[u8; 3] = b"GL\0";
pub const HPDF_COUNTRY_GD: &[u8; 3] = b"GD\0";
pub const HPDF_COUNTRY_GP: &[u8; 3] = b"GP\0";
pub const HPDF_COUNTRY_GU: &[u8; 3] = b"GU\0";
pub const HPDF_COUNTRY_GT: &[u8; 3] = b"GT\0";
pub const HPDF_COUNTRY_GN: &[u8; 3] = b"GN\0";
pub const HPDF_COUNTRY_GW: &[u8; 3] = b"GW\0";
pub const HPDF_COUNTRY_GY: &[u8; 3] = b"GY\0";
pub const HPDF_COUNTRY_HT: &[u8; 3] = b"HT\0";
pub const HPDF_COUNTRY_HM: &[u8; 3] = b"HM\0";
pub const HPDF_COUNTRY_HN: &[u8; 3] = b"HN\0";
pub const HPDF_COUNTRY_HK: &[u8; 3] = b"HK\0";
pub const HPDF_COUNTRY_HU: &[u8; 3] = b"HU\0";
pub const HPDF_COUNTRY_IS: &[u8; 3] = b"IS\0";
pub const HPDF_COUNTRY_IN: &[u8; 3] = b"IN\0";
pub const HPDF_COUNTRY_ID: &[u8; 3] = b"ID\0";
pub const HPDF_COUNTRY_IR: &[u8; 3] = b"IR\0";
pub const HPDF_COUNTRY_IQ: &[u8; 3] = b"IQ\0";
pub const HPDF_COUNTRY_IE: &[u8; 3] = b"IE\0";
pub const HPDF_COUNTRY_IL: &[u8; 3] = b"IL\0";
pub const HPDF_COUNTRY_IT: &[u8; 3] = b"IT\0";
pub const HPDF_COUNTRY_JM: &[u8; 3] = b"JM\0";
pub const HPDF_COUNTRY_JP: &[u8; 3] = b"JP\0";
pub const HPDF_COUNTRY_JO: &[u8; 3] = b"JO\0";
pub const HPDF_COUNTRY_KZ: &[u8; 3] = b"KZ\0";
pub const HPDF_COUNTRY_KE: &[u8; 3] = b"KE\0";
pub const HPDF_COUNTRY_KI: &[u8; 3] = b"KI\0";
pub const HPDF_COUNTRY_KP: &[u8; 3] = b"KP\0";
pub const HPDF_COUNTRY_KR: &[u8; 3] = b"KR\0";
pub const HPDF_COUNTRY_KW: &[u8; 3] = b"KW\0";
pub const HPDF_COUNTRY_KG: &[u8; 3] = b"KG\0";
pub const HPDF_COUNTRY_LA: &[u8; 3] = b"LA\0";
pub const HPDF_COUNTRY_LV: &[u8; 3] = b"LV\0";
pub const HPDF_COUNTRY_LB: &[u8; 3] = b"LB\0";
pub const HPDF_COUNTRY_LS: &[u8; 3] = b"LS\0";
pub const HPDF_COUNTRY_LR: &[u8; 3] = b"LR\0";
pub const HPDF_COUNTRY_LY: &[u8; 3] = b"LY\0";
pub const HPDF_COUNTRY_LI: &[u8; 3] = b"LI\0";
pub const HPDF_COUNTRY_LT: &[u8; 3] = b"LT\0";
pub const HPDF_COUNTRY_LU: &[u8; 3] = b"LU\0";
pub const HPDF_COUNTRY_MO: &[u8; 3] = b"MO\0";
pub const HPDF_COUNTRY_MK: &[u8; 3] = b"MK\0";
pub const HPDF_COUNTRY_MG: &[u8; 3] = b"MG\0";
pub const HPDF_COUNTRY_MW: &[u8; 3] = b"MW\0";
pub const HPDF_COUNTRY_MY: &[u8; 3] = b"MY\0";
pub const HPDF_COUNTRY_MV: &[u8; 3] = b"MV\0";
pub const HPDF_COUNTRY_ML: &[u8; 3] = b"ML\0";
pub const HPDF_COUNTRY_MT: &[u8; 3] = b"MT\0";
pub const HPDF_COUNTRY_MH: &[u8; 3] = b"MH\0";
pub const HPDF_COUNTRY_MQ: &[u8; 3] = b"MQ\0";
pub const HPDF_COUNTRY_MR: &[u8; 3] = b"MR\0";
pub const HPDF_COUNTRY_MU: &[u8; 3] = b"MU\0";
pub const HPDF_COUNTRY_YT: &[u8; 3] = b"YT\0";
pub const HPDF_COUNTRY_MX: &[u8; 3] = b"MX\0";
pub const HPDF_COUNTRY_FM: &[u8; 3] = b"FM\0";
pub const HPDF_COUNTRY_MD: &[u8; 3] = b"MD\0";
pub const HPDF_COUNTRY_MC: &[u8; 3] = b"MC\0";
pub const HPDF_COUNTRY_MN: &[u8; 3] = b"MN\0";
pub const HPDF_COUNTRY_MS: &[u8; 3] = b"MS\0";
pub const HPDF_COUNTRY_MA: &[u8; 3] = b"MA\0";
pub const HPDF_COUNTRY_MZ: &[u8; 3] = b"MZ\0";
pub const HPDF_COUNTRY_MM: &[u8; 3] = b"MM\0";
pub const HPDF_COUNTRY_NA: &[u8; 3] = b"NA\0";
pub const HPDF_COUNTRY_NR: &[u8; 3] = b"NR\0";
pub const HPDF_COUNTRY_NP: &[u8; 3] = b"NP\0";
pub const HPDF_COUNTRY_NL: &[u8; 3] = b"NL\0";
pub const HPDF_COUNTRY_AN: &[u8; 3] = b"AN\0";
pub const HPDF_COUNTRY_NC: &[u8; 3] = b"NC\0";
pub const HPDF_COUNTRY_NZ: &[u8; 3] = b"NZ\0";
pub const HPDF_COUNTRY_NI: &[u8; 3] = b"NI\0";
pub const HPDF_COUNTRY_NE: &[u8; 3] = b"NE\0";
pub const HPDF_COUNTRY_NG: &[u8; 3] = b"NG\0";
pub const HPDF_COUNTRY_NU: &[u8; 3] = b"NU\0";
pub const HPDF_COUNTRY_NF: &[u8; 3] = b"NF\0";
pub const HPDF_COUNTRY_MP: &[u8; 3] = b"MP\0";
pub const HPDF_COUNTRY_NO: &[u8; 3] = b"NO\0";
pub const HPDF_COUNTRY_OM: &[u8; 3] = b"OM\0";
pub const HPDF_COUNTRY_PK: &[u8; 3] = b"PK\0";
pub const HPDF_COUNTRY_PW: &[u8; 3] = b"PW\0";
pub const HPDF_COUNTRY_PA: &[u8; 3] = b"PA\0";
pub const HPDF_COUNTRY_PG: &[u8; 3] = b"PG\0";
pub const HPDF_COUNTRY_PY: &[u8; 3] = b"PY\0";
pub const HPDF_COUNTRY_PE: &[u8; 3] = b"PE\0";
pub const HPDF_COUNTRY_PH: &[u8; 3] = b"PH\0";
pub const HPDF_COUNTRY_PN: &[u8; 3] = b"PN\0";
pub const HPDF_COUNTRY_PL: &[u8; 3] = b"PL\0";
pub const HPDF_COUNTRY_PT: &[u8; 3] = b"PT\0";
pub const HPDF_COUNTRY_PR: &[u8; 3] = b"PR\0";
pub const HPDF_COUNTRY_QA: &[u8; 3] = b"QA\0";
pub const HPDF_COUNTRY_RE: &[u8; 3] = b"RE\0";
pub const HPDF_COUNTRY_RO: &[u8; 3] = b"RO\0";
pub const HPDF_COUNTRY_RU: &[u8; 3] = b"RU\0";
pub const HPDF_COUNTRY_RW: &[u8; 3] = b"RW\0";
pub const HPDF_COUNTRY_KN: &[u8; 3] = b"KN\0";
pub const HPDF_COUNTRY_LC: &[u8; 3] = b"LC\0";
pub const HPDF_COUNTRY_VC: &[u8; 3] = b"VC\0";
pub const HPDF_COUNTRY_WS: &[u8; 3] = b"WS\0";
pub const HPDF_COUNTRY_SM: &[u8; 3] = b"SM\0";
pub const HPDF_COUNTRY_ST: &[u8; 3] = b"ST\0";
pub const HPDF_COUNTRY_SA: &[u8; 3] = b"SA\0";
pub const HPDF_COUNTRY_SN: &[u8; 3] = b"SN\0";
pub const HPDF_COUNTRY_SC: &[u8; 3] = b"SC\0";
pub const HPDF_COUNTRY_SL: &[u8; 3] = b"SL\0";
pub const HPDF_COUNTRY_SG: &[u8; 3] = b"SG\0";
pub const HPDF_COUNTRY_SK: &[u8; 3] = b"SK\0";
pub const HPDF_COUNTRY_SI: &[u8; 3] = b"SI\0";
pub const HPDF_COUNTRY_SB: &[u8; 3] = b"SB\0";
pub const HPDF_COUNTRY_SO: &[u8; 3] = b"SO\0";
pub const HPDF_COUNTRY_ZA: &[u8; 3] = b"ZA\0";
pub const HPDF_COUNTRY_ES: &[u8; 3] = b"ES\0";
pub const HPDF_COUNTRY_LK: &[u8; 3] = b"LK\0";
pub const HPDF_COUNTRY_SH: &[u8; 3] = b"SH\0";
pub const HPDF_COUNTRY_PM: &[u8; 3] = b"PM\0";
pub const HPDF_COUNTRY_SD: &[u8; 3] = b"SD\0";
pub const HPDF_COUNTRY_SR: &[u8; 3] = b"SR\0";
pub const HPDF_COUNTRY_SJ: &[u8; 3] = b"SJ\0";
pub const HPDF_COUNTRY_SZ: &[u8; 3] = b"SZ\0";
pub const HPDF_COUNTRY_SE: &[u8; 3] = b"SE\0";
pub const HPDF_COUNTRY_CH: &[u8; 3] = b"CH\0";
pub const HPDF_COUNTRY_SY: &[u8; 3] = b"SY\0";
pub const HPDF_COUNTRY_TW: &[u8; 3] = b"TW\0";
pub const HPDF_COUNTRY_TJ: &[u8; 3] = b"TJ\0";
pub const HPDF_COUNTRY_TZ: &[u8; 3] = b"TZ\0";
pub const HPDF_COUNTRY_TH: &[u8; 3] = b"TH\0";
pub const HPDF_COUNTRY_TG: &[u8; 3] = b"TG\0";
pub const HPDF_COUNTRY_TK: &[u8; 3] = b"TK\0";
pub const HPDF_COUNTRY_TO: &[u8; 3] = b"TO\0";
pub const HPDF_COUNTRY_TT: &[u8; 3] = b"TT\0";
pub const HPDF_COUNTRY_TN: &[u8; 3] = b"TN\0";
pub const HPDF_COUNTRY_TR: &[u8; 3] = b"TR\0";
pub const HPDF_COUNTRY_TM: &[u8; 3] = b"TM\0";
pub const HPDF_COUNTRY_TC: &[u8; 3] = b"TC\0";
pub const HPDF_COUNTRY_TV: &[u8; 3] = b"TV\0";
pub const HPDF_COUNTRY_UG: &[u8; 3] = b"UG\0";
pub const HPDF_COUNTRY_UA: &[u8; 3] = b"UA\0";
pub const HPDF_COUNTRY_AE: &[u8; 3] = b"AE\0";
pub const HPDF_COUNTRY_GB: &[u8; 3] = b"GB\0";
pub const HPDF_COUNTRY_US: &[u8; 3] = b"US\0";
pub const HPDF_COUNTRY_UM: &[u8; 3] = b"UM\0";
pub const HPDF_COUNTRY_UY: &[u8; 3] = b"UY\0";
pub const HPDF_COUNTRY_UZ: &[u8; 3] = b"UZ\0";
pub const HPDF_COUNTRY_VU: &[u8; 3] = b"VU\0";
pub const HPDF_COUNTRY_VA: &[u8; 3] = b"VA\0";
pub const HPDF_COUNTRY_VE: &[u8; 3] = b"VE\0";
pub const HPDF_COUNTRY_VN: &[u8; 3] = b"VN\0";
pub const HPDF_COUNTRY_VG: &[u8; 3] = b"VG\0";
pub const HPDF_COUNTRY_VI: &[u8; 3] = b"VI\0";
pub const HPDF_COUNTRY_WF: &[u8; 3] = b"WF\0";
pub const HPDF_COUNTRY_EH: &[u8; 3] = b"EH\0";
pub const HPDF_COUNTRY_YE: &[u8; 3] = b"YE\0";
pub const HPDF_COUNTRY_YU: &[u8; 3] = b"YU\0";
pub const HPDF_COUNTRY_ZR: &[u8; 3] = b"ZR\0";
pub const HPDF_COUNTRY_ZM: &[u8; 3] = b"ZM\0";
pub const HPDF_COUNTRY_ZW: &[u8; 3] = b"ZW\0";
pub const HPDF_LANG_AA: &[u8; 3] = b"aa\0";
pub const HPDF_LANG_AB: &[u8; 3] = b"ab\0";
pub const HPDF_LANG_AF: &[u8; 3] = b"af\0";
pub const HPDF_LANG_AM: &[u8; 3] = b"am\0";
pub const HPDF_LANG_AR: &[u8; 3] = b"ar\0";
pub const HPDF_LANG_AS: &[u8; 3] = b"as\0";
pub const HPDF_LANG_AY: &[u8; 3] = b"ay\0";
pub const HPDF_LANG_AZ: &[u8; 3] = b"az\0";
pub const HPDF_LANG_BA: &[u8; 3] = b"ba\0";
pub const HPDF_LANG_BE: &[u8; 3] = b"be\0";
pub const HPDF_LANG_BG: &[u8; 3] = b"bg\0";
pub const HPDF_LANG_BH: &[u8; 3] = b"bh\0";
pub const HPDF_LANG_BI: &[u8; 3] = b"bi\0";
pub const HPDF_LANG_BN: &[u8; 3] = b"bn\0";
pub const HPDF_LANG_BO: &[u8; 3] = b"bo\0";
pub const HPDF_LANG_BR: &[u8; 3] = b"br\0";
pub const HPDF_LANG_CA: &[u8; 3] = b"ca\0";
pub const HPDF_LANG_CO: &[u8; 3] = b"co\0";
pub const HPDF_LANG_CS: &[u8; 3] = b"cs\0";
pub const HPDF_LANG_CY: &[u8; 3] = b"cy\0";
pub const HPDF_LANG_DA: &[u8; 3] = b"da\0";
pub const HPDF_LANG_DE: &[u8; 3] = b"de\0";
pub const HPDF_LANG_DZ: &[u8; 3] = b"dz\0";
pub const HPDF_LANG_EL: &[u8; 3] = b"el\0";
pub const HPDF_LANG_EN: &[u8; 3] = b"en\0";
pub const HPDF_LANG_EO: &[u8; 3] = b"eo\0";
pub const HPDF_LANG_ES: &[u8; 3] = b"es\0";
pub const HPDF_LANG_ET: &[u8; 3] = b"et\0";
pub const HPDF_LANG_EU: &[u8; 3] = b"eu\0";
pub const HPDF_LANG_FA: &[u8; 3] = b"fa\0";
pub const HPDF_LANG_FI: &[u8; 3] = b"fi\0";
pub const HPDF_LANG_FJ: &[u8; 3] = b"fj\0";
pub const HPDF_LANG_FO: &[u8; 3] = b"fo\0";
pub const HPDF_LANG_FR: &[u8; 3] = b"fr\0";
pub const HPDF_LANG_FY: &[u8; 3] = b"fy\0";
pub const HPDF_LANG_GA: &[u8; 3] = b"ga\0";
pub const HPDF_LANG_GD: &[u8; 3] = b"gd\0";
pub const HPDF_LANG_GL: &[u8; 3] = b"gl\0";
pub const HPDF_LANG_GN: &[u8; 3] = b"gn\0";
pub const HPDF_LANG_GU: &[u8; 3] = b"gu\0";
pub const HPDF_LANG_HA: &[u8; 3] = b"ha\0";
pub const HPDF_LANG_HI: &[u8; 3] = b"hi\0";
pub const HPDF_LANG_HR: &[u8; 3] = b"hr\0";
pub const HPDF_LANG_HU: &[u8; 3] = b"hu\0";
pub const HPDF_LANG_HY: &[u8; 3] = b"hy\0";
pub const HPDF_LANG_IA: &[u8; 3] = b"ia\0";
pub const HPDF_LANG_IE: &[u8; 3] = b"ie\0";
pub const HPDF_LANG_IK: &[u8; 3] = b"ik\0";
pub const HPDF_LANG_IN: &[u8; 3] = b"in\0";
pub const HPDF_LANG_IS: &[u8; 3] = b"is\0";
pub const HPDF_LANG_IT: &[u8; 3] = b"it\0";
pub const HPDF_LANG_IW: &[u8; 3] = b"iw\0";
pub const HPDF_LANG_JA: &[u8; 3] = b"ja\0";
pub const HPDF_LANG_JI: &[u8; 3] = b"ji\0";
pub const HPDF_LANG_JW: &[u8; 3] = b"jw\0";
pub const HPDF_LANG_KA: &[u8; 3] = b"ka\0";
pub const HPDF_LANG_KK: &[u8; 3] = b"kk\0";
pub const HPDF_LANG_KL: &[u8; 3] = b"kl\0";
pub const HPDF_LANG_KM: &[u8; 3] = b"km\0";
pub const HPDF_LANG_KN: &[u8; 3] = b"kn\0";
pub const HPDF_LANG_KO: &[u8; 3] = b"ko\0";
pub const HPDF_LANG_KS: &[u8; 3] = b"ks\0";
pub const HPDF_LANG_KU: &[u8; 3] = b"ku\0";
pub const HPDF_LANG_KY: &[u8; 3] = b"ky\0";
pub const HPDF_LANG_LA: &[u8; 3] = b"la\0";
pub const HPDF_LANG_LN: &[u8; 3] = b"ln\0";
pub const HPDF_LANG_LO: &[u8; 3] = b"lo\0";
pub const HPDF_LANG_LT: &[u8; 3] = b"lt\0";
pub const HPDF_LANG_LV: &[u8; 3] = b"lv\0";
pub const HPDF_LANG_MG: &[u8; 3] = b"mg\0";
pub const HPDF_LANG_MI: &[u8; 3] = b"mi\0";
pub const HPDF_LANG_MK: &[u8; 3] = b"mk\0";
pub const HPDF_LANG_ML: &[u8; 3] = b"ml\0";
pub const HPDF_LANG_MN: &[u8; 3] = b"mn\0";
pub const HPDF_LANG_MO: &[u8; 3] = b"mo\0";
pub const HPDF_LANG_MR: &[u8; 3] = b"mr\0";
pub const HPDF_LANG_MS: &[u8; 3] = b"ms\0";
pub const HPDF_LANG_MT: &[u8; 3] = b"mt\0";
pub const HPDF_LANG_MY: &[u8; 3] = b"my\0";
pub const HPDF_LANG_NA: &[u8; 3] = b"na\0";
pub const HPDF_LANG_NE: &[u8; 3] = b"ne\0";
pub const HPDF_LANG_NL: &[u8; 3] = b"nl\0";
pub const HPDF_LANG_NO: &[u8; 3] = b"no\0";
pub const HPDF_LANG_OC: &[u8; 3] = b"oc\0";
pub const HPDF_LANG_OM: &[u8; 3] = b"om\0";
pub const HPDF_LANG_OR: &[u8; 3] = b"or\0";
pub const HPDF_LANG_PA: &[u8; 3] = b"pa\0";
pub const HPDF_LANG_PL: &[u8; 3] = b"pl\0";
pub const HPDF_LANG_PS: &[u8; 3] = b"ps\0";
pub const HPDF_LANG_PT: &[u8; 3] = b"pt\0";
pub const HPDF_LANG_QU: &[u8; 3] = b"qu\0";
pub const HPDF_LANG_RM: &[u8; 3] = b"rm\0";
pub const HPDF_LANG_RN: &[u8; 3] = b"rn\0";
pub const HPDF_LANG_RO: &[u8; 3] = b"ro\0";
pub const HPDF_LANG_RU: &[u8; 3] = b"ru\0";
pub const HPDF_LANG_RW: &[u8; 3] = b"rw\0";
pub const HPDF_LANG_SA: &[u8; 3] = b"sa\0";
pub const HPDF_LANG_SD: &[u8; 3] = b"sd\0";
pub const HPDF_LANG_SG: &[u8; 3] = b"sg\0";
pub const HPDF_LANG_SH: &[u8; 3] = b"sh\0";
pub const HPDF_LANG_SI: &[u8; 3] = b"si\0";
pub const HPDF_LANG_SK: &[u8; 3] = b"sk\0";
pub const HPDF_LANG_SL: &[u8; 3] = b"sl\0";
pub const HPDF_LANG_SM: &[u8; 3] = b"sm\0";
pub const HPDF_LANG_SN: &[u8; 3] = b"sn\0";
pub const HPDF_LANG_SO: &[u8; 3] = b"so\0";
pub const HPDF_LANG_SQ: &[u8; 3] = b"sq\0";
pub const HPDF_LANG_SR: &[u8; 3] = b"sr\0";
pub const HPDF_LANG_SS: &[u8; 3] = b"ss\0";
pub const HPDF_LANG_ST: &[u8; 3] = b"st\0";
pub const HPDF_LANG_SU: &[u8; 3] = b"su\0";
pub const HPDF_LANG_SV: &[u8; 3] = b"sv\0";
pub const HPDF_LANG_SW: &[u8; 3] = b"sw\0";
pub const HPDF_LANG_TA: &[u8; 3] = b"ta\0";
pub const HPDF_LANG_TE: &[u8; 3] = b"te\0";
pub const HPDF_LANG_TG: &[u8; 3] = b"tg\0";
pub const HPDF_LANG_TH: &[u8; 3] = b"th\0";
pub const HPDF_LANG_TI: &[u8; 3] = b"ti\0";
pub const HPDF_LANG_TK: &[u8; 3] = b"tk\0";
pub const HPDF_LANG_TL: &[u8; 3] = b"tl\0";
pub const HPDF_LANG_TN: &[u8; 3] = b"tn\0";
pub const HPDF_LANG_TR: &[u8; 3] = b"tr\0";
pub const HPDF_LANG_TS: &[u8; 3] = b"ts\0";
pub const HPDF_LANG_TT: &[u8; 3] = b"tt\0";
pub const HPDF_LANG_TW: &[u8; 3] = b"tw\0";
pub const HPDF_LANG_UK: &[u8; 3] = b"uk\0";
pub const HPDF_LANG_UR: &[u8; 3] = b"ur\0";
pub const HPDF_LANG_UZ: &[u8; 3] = b"uz\0";
pub const HPDF_LANG_VI: &[u8; 3] = b"vi\0";
pub const HPDF_LANG_VO: &[u8; 3] = b"vo\0";
pub const HPDF_LANG_WO: &[u8; 3] = b"wo\0";
pub const HPDF_LANG_XH: &[u8; 3] = b"xh\0";
pub const HPDF_LANG_YO: &[u8; 3] = b"yo\0";
pub const HPDF_LANG_ZH: &[u8; 3] = b"zh\0";
pub const HPDF_LANG_ZU: &[u8; 3] = b"zu\0";
pub const HPDF_GMODE_PAGE_DESCRIPTION: u32 = 1;
pub const HPDF_GMODE_PATH_OBJECT: u32 = 2;
pub const HPDF_GMODE_TEXT_OBJECT: u32 = 4;
pub const HPDF_GMODE_CLIPPING_PATH: u32 = 8;
pub const HPDF_GMODE_SHADING: u32 = 16;
pub const HPDF_GMODE_INLINE_IMAGE: u32 = 32;
pub const HPDF_GMODE_EXTERNAL_OBJECT: u32 = 64;
pub const HPDF_SIG_BYTES: u32 = 1095779398;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const HPDF_ARRAY_COUNT_ERR: u32 = 4097;
pub const HPDF_ARRAY_ITEM_NOT_FOUND: u32 = 4098;
pub const HPDF_ARRAY_ITEM_UNEXPECTED_TYPE: u32 = 4099;
pub const HPDF_BINARY_LENGTH_ERR: u32 = 4100;
pub const HPDF_CANNOT_GET_PALLET: u32 = 4101;
pub const HPDF_DICT_COUNT_ERR: u32 = 4103;
pub const HPDF_DICT_ITEM_NOT_FOUND: u32 = 4104;
pub const HPDF_DICT_ITEM_UNEXPECTED_TYPE: u32 = 4105;
pub const HPDF_DICT_STREAM_LENGTH_NOT_FOUND: u32 = 4106;
pub const HPDF_DOC_ENCRYPTDICT_NOT_FOUND: u32 = 4107;
pub const HPDF_DOC_INVALID_OBJECT: u32 = 4108;
pub const HPDF_DUPLICATE_REGISTRATION: u32 = 4110;
pub const HPDF_EXCEED_JWW_CODE_NUM_LIMIT: u32 = 4111;
pub const HPDF_ENCRYPT_INVALID_PASSWORD: u32 = 4113;
pub const HPDF_ERR_UNKNOWN_CLASS: u32 = 4115;
pub const HPDF_EXCEED_GSTATE_LIMIT: u32 = 4116;
pub const HPDF_FAILD_TO_ALLOC_MEM: u32 = 4117;
pub const HPDF_FILE_IO_ERROR: u32 = 4118;
pub const HPDF_FILE_OPEN_ERROR: u32 = 4119;
pub const HPDF_FONT_EXISTS: u32 = 4121;
pub const HPDF_FONT_INVALID_WIDTHS_TABLE: u32 = 4122;
pub const HPDF_INVALID_AFM_HEADER: u32 = 4123;
pub const HPDF_INVALID_ANNOTATION: u32 = 4124;
pub const HPDF_INVALID_BIT_PER_COMPONENT: u32 = 4126;
pub const HPDF_INVALID_CHAR_MATRICS_DATA: u32 = 4127;
pub const HPDF_INVALID_COLOR_SPACE: u32 = 4128;
pub const HPDF_INVALID_COMPRESSION_MODE: u32 = 4129;
pub const HPDF_INVALID_DATE_TIME: u32 = 4130;
pub const HPDF_INVALID_DESTINATION: u32 = 4131;
pub const HPDF_INVALID_DOCUMENT: u32 = 4133;
pub const HPDF_INVALID_DOCUMENT_STATE: u32 = 4134;
pub const HPDF_INVALID_ENCODER: u32 = 4135;
pub const HPDF_INVALID_ENCODER_TYPE: u32 = 4136;
pub const HPDF_INVALID_ENCODING_NAME: u32 = 4139;
pub const HPDF_INVALID_ENCRYPT_KEY_LEN: u32 = 4140;
pub const HPDF_INVALID_FONTDEF_DATA: u32 = 4141;
pub const HPDF_INVALID_FONTDEF_TYPE: u32 = 4142;
pub const HPDF_INVALID_FONT_NAME: u32 = 4143;
pub const HPDF_INVALID_IMAGE: u32 = 4144;
pub const HPDF_INVALID_JPEG_DATA: u32 = 4145;
pub const HPDF_INVALID_N_DATA: u32 = 4146;
pub const HPDF_INVALID_OBJECT: u32 = 4147;
pub const HPDF_INVALID_OBJ_ID: u32 = 4148;
pub const HPDF_INVALID_OPERATION: u32 = 4149;
pub const HPDF_INVALID_OUTLINE: u32 = 4150;
pub const HPDF_INVALID_PAGE: u32 = 4151;
pub const HPDF_INVALID_PAGES: u32 = 4152;
pub const HPDF_INVALID_PARAMETER: u32 = 4153;
pub const HPDF_INVALID_PNG_IMAGE: u32 = 4155;
pub const HPDF_INVALID_STREAM: u32 = 4156;
pub const HPDF_MISSING_FILE_NAME_ENTRY: u32 = 4157;
pub const HPDF_INVALID_TTC_FILE: u32 = 4159;
pub const HPDF_INVALID_TTC_INDEX: u32 = 4160;
pub const HPDF_INVALID_WX_DATA: u32 = 4161;
pub const HPDF_ITEM_NOT_FOUND: u32 = 4162;
pub const HPDF_LIBPNG_ERROR: u32 = 4163;
pub const HPDF_NAME_INVALID_VALUE: u32 = 4164;
pub const HPDF_NAME_OUT_OF_RANGE: u32 = 4165;
pub const HPDF_PAGE_INVALID_PARAM_COUNT: u32 = 4168;
pub const HPDF_PAGES_MISSING_KIDS_ENTRY: u32 = 4169;
pub const HPDF_PAGE_CANNOT_FIND_OBJECT: u32 = 4170;
pub const HPDF_PAGE_CANNOT_GET_ROOT_PAGES: u32 = 4171;
pub const HPDF_PAGE_CANNOT_RESTORE_GSTATE: u32 = 4172;
pub const HPDF_PAGE_CANNOT_SET_PARENT: u32 = 4173;
pub const HPDF_PAGE_FONT_NOT_FOUND: u32 = 4174;
pub const HPDF_PAGE_INVALID_FONT: u32 = 4175;
pub const HPDF_PAGE_INVALID_FONT_SIZE: u32 = 4176;
pub const HPDF_PAGE_INVALID_GMODE: u32 = 4177;
pub const HPDF_PAGE_INVALID_INDEX: u32 = 4178;
pub const HPDF_PAGE_INVALID_ROTATE_VALUE: u32 = 4179;
pub const HPDF_PAGE_INVALID_SIZE: u32 = 4180;
pub const HPDF_PAGE_INVALID_XOBJECT: u32 = 4181;
pub const HPDF_PAGE_OUT_OF_RANGE: u32 = 4182;
pub const HPDF_REAL_OUT_OF_RANGE: u32 = 4183;
pub const HPDF_STREAM_EOF: u32 = 4184;
pub const HPDF_STREAM_READLN_CONTINUE: u32 = 4185;
pub const HPDF_STRING_OUT_OF_RANGE: u32 = 4187;
pub const HPDF_THIS_FUNC_WAS_SKIPPED: u32 = 4188;
pub const HPDF_TTF_CANNOT_EMBEDDING_FONT: u32 = 4189;
pub const HPDF_TTF_INVALID_CMAP: u32 = 4190;
pub const HPDF_TTF_INVALID_FOMAT: u32 = 4191;
pub const HPDF_TTF_MISSING_TABLE: u32 = 4192;
pub const HPDF_UNSUPPORTED_FONT_TYPE: u32 = 4193;
pub const HPDF_UNSUPPORTED_FUNC: u32 = 4194;
pub const HPDF_UNSUPPORTED_JPEG_FORMAT: u32 = 4195;
pub const HPDF_UNSUPPORTED_TYPE1_FONT: u32 = 4196;
pub const HPDF_XREF_COUNT_ERR: u32 = 4197;
pub const HPDF_ZLIB_ERROR: u32 = 4198;
pub const HPDF_INVALID_PAGE_INDEX: u32 = 4199;
pub const HPDF_INVALID_URI: u32 = 4200;
pub const HPDF_PAGE_LAYOUT_OUT_OF_RANGE: u32 = 4201;
pub const HPDF_PAGE_MODE_OUT_OF_RANGE: u32 = 4208;
pub const HPDF_PAGE_NUM_STYLE_OUT_OF_RANGE: u32 = 4209;
pub const HPDF_ANNOT_INVALID_ICON: u32 = 4210;
pub const HPDF_ANNOT_INVALID_BORDER_STYLE: u32 = 4211;
pub const HPDF_PAGE_INVALID_DIRECTION: u32 = 4212;
pub const HPDF_INVALID_FONT: u32 = 4213;
pub const HPDF_PAGE_INSUFFICIENT_SPACE: u32 = 4214;
pub const HPDF_PAGE_INVALID_DISPLAY_TIME: u32 = 4215;
pub const HPDF_PAGE_INVALID_TRANSITION_TIME: u32 = 4216;
pub const HPDF_INVALID_PAGE_SLIDESHOW_TYPE: u32 = 4217;
pub const HPDF_EXT_GSTATE_OUT_OF_RANGE: u32 = 4224;
pub const HPDF_INVALID_EXT_GSTATE: u32 = 4225;
pub const HPDF_EXT_GSTATE_READ_ONLY: u32 = 4226;
pub const HPDF_INVALID_U3D_DATA: u32 = 4227;
pub const HPDF_NAME_CANNOT_GET_NAMES: u32 = 4228;
pub const HPDF_INVALID_ICC_COMPONENT_NUM: u32 = 4229;
pub const HPDF_PAGE_INVALID_BOUNDARY: u32 = 4230;
pub const HPDF_INVALID_SHADING_TYPE: u32 = 4232;
pub const HPDF_ID_LEN: u32 = 16;
pub const HPDF_PASSWD_LEN: u32 = 32;
pub const HPDF_ENCRYPT_KEY_MAX: u32 = 16;
pub const HPDF_MD5_KEY_LEN: u32 = 16;
pub const HPDF_PERMISSION_PAD: u32 = 4294967232;
pub const HPDF_ARC4_BUF_SIZE: u32 = 256;
pub const HPDF_STREAM_SIG_BYTES: u32 = 1398035021;
pub const HPDF_STREAM_FILTER_NONE: u32 = 0;
pub const HPDF_STREAM_FILTER_ASCIIHEX: u32 = 256;
pub const HPDF_STREAM_FILTER_ASCII85: u32 = 512;
pub const HPDF_STREAM_FILTER_FLATE_DECODE: u32 = 1024;
pub const HPDF_STREAM_FILTER_DCT_DECODE: u32 = 2048;
pub const HPDF_STREAM_FILTER_CCITT_DECODE: u32 = 4096;
pub const HPDF_ENCODER_SIG_BYTES: u32 = 1162756932;
pub const HPDF_ENCODING_FONT_SPECIFIC: &[u8; 13] = b"FontSpecific\0";
pub const HPDF_ENCODING_STANDARD: &[u8; 17] = b"StandardEncoding\0";
pub const HPDF_ENCODING_MAC_ROMAN: &[u8; 17] = b"MacRomanEncoding\0";
pub const HPDF_ENCODING_WIN_ANSI: &[u8; 16] = b"WinAnsiEncoding\0";
pub const HPDF_ENCODING_ISO8859_2: &[u8; 10] = b"ISO8859-2\0";
pub const HPDF_ENCODING_ISO8859_3: &[u8; 10] = b"ISO8859-3\0";
pub const HPDF_ENCODING_ISO8859_4: &[u8; 10] = b"ISO8859-4\0";
pub const HPDF_ENCODING_ISO8859_5: &[u8; 10] = b"ISO8859-5\0";
pub const HPDF_ENCODING_ISO8859_6: &[u8; 10] = b"ISO8859-6\0";
pub const HPDF_ENCODING_ISO8859_7: &[u8; 10] = b"ISO8859-7\0";
pub const HPDF_ENCODING_ISO8859_8: &[u8; 10] = b"ISO8859-8\0";
pub const HPDF_ENCODING_ISO8859_9: &[u8; 10] = b"ISO8859-9\0";
pub const HPDF_ENCODING_ISO8859_10: &[u8; 11] = b"ISO8859-10\0";
pub const HPDF_ENCODING_ISO8859_11: &[u8; 11] = b"ISO8859-11\0";
pub const HPDF_ENCODING_ISO8859_13: &[u8; 11] = b"ISO8859-13\0";
pub const HPDF_ENCODING_ISO8859_14: &[u8; 11] = b"ISO8859-14\0";
pub const HPDF_ENCODING_ISO8859_15: &[u8; 11] = b"ISO8859-15\0";
pub const HPDF_ENCODING_ISO8859_16: &[u8; 11] = b"ISO8859-16\0";
pub const HPDF_ENCODING_CP1250: &[u8; 7] = b"CP1250\0";
pub const HPDF_ENCODING_CP1251: &[u8; 7] = b"CP1251\0";
pub const HPDF_ENCODING_CP1252: &[u8; 7] = b"CP1252\0";
pub const HPDF_ENCODING_CP1253: &[u8; 7] = b"CP1253\0";
pub const HPDF_ENCODING_CP1254: &[u8; 7] = b"CP1254\0";
pub const HPDF_ENCODING_CP1255: &[u8; 7] = b"CP1255\0";
pub const HPDF_ENCODING_CP1256: &[u8; 7] = b"CP1256\0";
pub const HPDF_ENCODING_CP1257: &[u8; 7] = b"CP1257\0";
pub const HPDF_ENCODING_CP1258: &[u8; 7] = b"CP1258\0";
pub const HPDF_ENCODING_KOI8_R: &[u8; 7] = b"KOI8-R\0";
pub const char_NOTDEF: &[u8; 8] = b".notdef\0";
pub const HPDF_OTYPE_NONE: u32 = 0;
pub const HPDF_OTYPE_DIRECT: u32 = 2147483648;
pub const HPDF_OTYPE_INDIRECT: u32 = 1073741824;
pub const HPDF_OTYPE_ANY: u32 = 3221225472;
pub const HPDF_OTYPE_HIDDEN: u32 = 268435456;
pub const HPDF_OCLASS_UNKNOWN: u32 = 1;
pub const HPDF_OCLASS_NULL: u32 = 2;
pub const HPDF_OCLASS_BOOLEAN: u32 = 3;
pub const HPDF_OCLASS_NUMBER: u32 = 4;
pub const HPDF_OCLASS_REAL: u32 = 5;
pub const HPDF_OCLASS_NAME: u32 = 6;
pub const HPDF_OCLASS_STRING: u32 = 7;
pub const HPDF_OCLASS_BINARY: u32 = 8;
pub const HPDF_OCLASS_ARRAY: u32 = 16;
pub const HPDF_OCLASS_DICT: u32 = 17;
pub const HPDF_OCLASS_PROXY: u32 = 18;
pub const HPDF_OCLASS_DIRECT: u32 = 160;
pub const HPDF_OCLASS_ANY: u32 = 255;
pub const HPDF_OSUBCLASS_FONT: u32 = 256;
pub const HPDF_OSUBCLASS_CATALOG: u32 = 512;
pub const HPDF_OSUBCLASS_PAGES: u32 = 768;
pub const HPDF_OSUBCLASS_PAGE: u32 = 1024;
pub const HPDF_OSUBCLASS_XOBJECT: u32 = 1280;
pub const HPDF_OSUBCLASS_OUTLINE: u32 = 1536;
pub const HPDF_OSUBCLASS_DESTINATION: u32 = 1792;
pub const HPDF_OSUBCLASS_ANNOTATION: u32 = 2048;
pub const HPDF_OSUBCLASS_ENCRYPT: u32 = 2304;
pub const HPDF_OSUBCLASS_EXT_GSTATE: u32 = 2560;
pub const HPDF_OSUBCLASS_EXT_GSTATE_R: u32 = 2816;
pub const HPDF_OSUBCLASS_NAMEDICT: u32 = 3072;
pub const HPDF_OSUBCLASS_NAMETREE: u32 = 3328;
pub const HPDF_OSUBCLASS_SHADING: u32 = 3584;
pub const HPDF_FREE_ENTRY: u8 = 102u8;
pub const HPDF_IN_USE_ENTRY: u8 = 110u8;
pub const HPDF_FONTDEF_SIG_BYTES: u32 = 1179602516;
pub const HPDF_FONT_FIXED_WIDTH: u32 = 1;
pub const HPDF_FONT_SERIF: u32 = 2;
pub const HPDF_FONT_SYMBOLIC: u32 = 4;
pub const HPDF_FONT_SCRIPT: u32 = 8;
pub const HPDF_FONT_STD_CHARSET: u32 = 32;
pub const HPDF_FONT_ITALIC: u32 = 64;
pub const HPDF_FONT_ALL_CAP: u32 = 65536;
pub const HPDF_FONT_SMALL_CAP: u32 = 131072;
pub const HPDF_FONT_FOURCE_BOLD: u32 = 262144;
pub const HPDF_CID_W_TYPE_FROM_TO: u32 = 0;
pub const HPDF_CID_W_TYPE_FROM_ARRAY: u32 = 1;
pub const HPDF_TTF_FONT_TAG_LEN: u32 = 6;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_exception_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fsr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__fsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__far)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_exception_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__far)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__esr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__exception)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state>(),
        68usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__cpsr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_thread_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_thread_state64>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fp) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__cpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_vfp_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_vfp_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_vfp_state>(),
        260usize,
        concat!("Size of: ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_vfp_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpscr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__fpscr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_neon_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state64>(),
        528usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_neon_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_neon_state>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_neon_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___arm_pagein_state() {
    const UNINIT: ::std::mem::MaybeUninit<__arm_pagein_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__arm_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[test]
fn bindgen_test_layout___arm_legacy_debug_state() {
    const UNINIT: ::std::mem::MaybeUninit<__arm_legacy_debug_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__arm_legacy_debug_state>(),
        256usize,
        concat!("Size of: ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__arm_legacy_debug_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_debug_state32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state32>(),
        264usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state32>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_debug_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_debug_state64>(),
        520usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_arm_cpmu_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_arm_cpmu_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_arm_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_arm_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        340usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mcontext64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        816usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ns) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ns)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_sigaltstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ucontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    const UNINIT: ::std::mem::MaybeUninit<__siginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<__sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    const UNINIT: ::std::mem::MaybeUninit<sigvec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::std::mem::MaybeUninit<rusage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v0> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v6() {
    const UNINIT: ::std::mem::MaybeUninit<rusage_info_v6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v6>(),
        464usize,
        concat!("Size of: ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v6>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_user_ptime) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_ptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_system_ptime) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_ptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pinstructions) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pinstructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_pcycles) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pcycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_energy_nj) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_energy_nj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_penergy_nj) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_penergy_nj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ri_reserved) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_reserved)
        )
    );
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::std::mem::MaybeUninit<rlimit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    const UNINIT: ::std::mem::MaybeUninit<proc_rlimit_control_wakeupmon> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[test]
fn bindgen_test_layout__OSUnalignedU16() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU16>(),
        2usize,
        concat!("Size of: ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU16>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU16),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[test]
fn bindgen_test_layout__OSUnalignedU32() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU32>(),
        4usize,
        concat!("Size of: ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU32>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU32),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[test]
fn bindgen_test_layout__OSUnalignedU64() {
    const UNINIT: ::std::mem::MaybeUninit<_OSUnalignedU64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_OSUnalignedU64>(),
        8usize,
        concat!("Size of: ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        ::std::mem::align_of::<_OSUnalignedU64>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU64),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::std::mem::MaybeUninit<wait> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type HPDF_INT = ::std::os::raw::c_int;
pub type HPDF_UINT = ::std::os::raw::c_uint;
pub type HPDF_INT64 = ::std::os::raw::c_longlong;
pub type HPDF_UINT64 = ::std::os::raw::c_ulonglong;
pub type HPDF_INT32 = ::std::os::raw::c_int;
pub type HPDF_UINT32 = ::std::os::raw::c_uint;
pub type HPDF_INT16 = ::std::os::raw::c_short;
pub type HPDF_UINT16 = ::std::os::raw::c_ushort;
pub type HPDF_INT8 = ::std::os::raw::c_schar;
pub type HPDF_UINT8 = ::std::os::raw::c_uchar;
pub type HPDF_BYTE = ::std::os::raw::c_uchar;
pub type HPDF_REAL = f32;
pub type HPDF_DOUBLE = f64;
pub type HPDF_BOOL = ::std::os::raw::c_int;
pub type HPDF_STATUS = ::std::os::raw::c_ulong;
pub type HPDF_CID = HPDF_UINT16;
pub type HPDF_UNICODE = HPDF_UINT16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Point {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_Point() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Point>(),
        8usize,
        concat!("Size of: ", stringify!(_HPDF_Point))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Point>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Point),
            "::",
            stringify!(y)
        )
    );
}
pub type HPDF_Point = _HPDF_Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Rect {
    pub left: HPDF_REAL,
    pub bottom: HPDF_REAL,
    pub right: HPDF_REAL,
    pub top: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Rect>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Rect>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Rect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Rect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Rect),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Rect),
            "::",
            stringify!(top)
        )
    );
}
pub type HPDF_Rect = _HPDF_Rect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Point3D {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
    pub z: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_Point3D() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Point3D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Point3D>(),
        12usize,
        concat!("Size of: ", stringify!(_HPDF_Point3D))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Point3D>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Point3D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Point3D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Point3D),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Point3D),
            "::",
            stringify!(z)
        )
    );
}
pub type HPDF_Point3D = _HPDF_Point3D;
pub type HPDF_Box = _HPDF_Rect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Date {
    pub year: HPDF_INT,
    pub month: HPDF_INT,
    pub day: HPDF_INT,
    pub hour: HPDF_INT,
    pub minutes: HPDF_INT,
    pub seconds: HPDF_INT,
    pub ind: ::std::os::raw::c_char,
    pub off_hour: HPDF_INT,
    pub off_minutes: HPDF_INT,
}
#[test]
fn bindgen_test_layout__HPDF_Date() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Date> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Date>(),
        36usize,
        concat!("Size of: ", stringify!(_HPDF_Date))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Date>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Date))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minutes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(ind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off_hour) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(off_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off_minutes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Date),
            "::",
            stringify!(off_minutes)
        )
    );
}
pub type HPDF_Date = _HPDF_Date;
pub const _HPDF_InfoType_HPDF_INFO_CREATION_DATE: _HPDF_InfoType = 0;
pub const _HPDF_InfoType_HPDF_INFO_MOD_DATE: _HPDF_InfoType = 1;
pub const _HPDF_InfoType_HPDF_INFO_AUTHOR: _HPDF_InfoType = 2;
pub const _HPDF_InfoType_HPDF_INFO_CREATOR: _HPDF_InfoType = 3;
pub const _HPDF_InfoType_HPDF_INFO_PRODUCER: _HPDF_InfoType = 4;
pub const _HPDF_InfoType_HPDF_INFO_TITLE: _HPDF_InfoType = 5;
pub const _HPDF_InfoType_HPDF_INFO_SUBJECT: _HPDF_InfoType = 6;
pub const _HPDF_InfoType_HPDF_INFO_KEYWORDS: _HPDF_InfoType = 7;
pub const _HPDF_InfoType_HPDF_INFO_TRAPPED: _HPDF_InfoType = 8;
pub const _HPDF_InfoType_HPDF_INFO_GTS_PDFX: _HPDF_InfoType = 9;
pub const _HPDF_InfoType_HPDF_INFO_EOF: _HPDF_InfoType = 10;
pub type _HPDF_InfoType = ::std::os::raw::c_uint;
pub use self::_HPDF_InfoType as HPDF_InfoType;
pub const _HPDF_PDFA_TYPE_HPDF_PDFA_1A: _HPDF_PDFA_TYPE = 0;
pub const _HPDF_PDFA_TYPE_HPDF_PDFA_1B: _HPDF_PDFA_TYPE = 1;
pub type _HPDF_PDFA_TYPE = ::std::os::raw::c_uint;
pub use self::_HPDF_PDFA_TYPE as HPDF_PDFAType;
pub const _HPDF_PdfVer_HPDF_VER_12: _HPDF_PdfVer = 0;
pub const _HPDF_PdfVer_HPDF_VER_13: _HPDF_PdfVer = 1;
pub const _HPDF_PdfVer_HPDF_VER_14: _HPDF_PdfVer = 2;
pub const _HPDF_PdfVer_HPDF_VER_15: _HPDF_PdfVer = 3;
pub const _HPDF_PdfVer_HPDF_VER_16: _HPDF_PdfVer = 4;
pub const _HPDF_PdfVer_HPDF_VER_17: _HPDF_PdfVer = 5;
pub const _HPDF_PdfVer_HPDF_VER_EOF: _HPDF_PdfVer = 6;
pub type _HPDF_PdfVer = ::std::os::raw::c_uint;
pub use self::_HPDF_PdfVer as HPDF_PDFVer;
pub const _HPDF_EncryptMode_HPDF_ENCRYPT_R2: _HPDF_EncryptMode = 2;
pub const _HPDF_EncryptMode_HPDF_ENCRYPT_R3: _HPDF_EncryptMode = 3;
pub type _HPDF_EncryptMode = ::std::os::raw::c_uint;
pub use self::_HPDF_EncryptMode as HPDF_EncryptMode;
pub type HPDF_Error_Handler = ::std::option::Option<
    unsafe extern "C" fn(
        error_no: HPDF_STATUS,
        detail_no: HPDF_STATUS,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type HPDF_Alloc_Func =
    ::std::option::Option<unsafe extern "C" fn(size: HPDF_UINT) -> *mut ::std::os::raw::c_void>;
pub type HPDF_Free_Func =
    ::std::option::Option<unsafe extern "C" fn(aptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TextWidth {
    pub numchars: HPDF_UINT,
    pub numwords: HPDF_UINT,
    pub width: HPDF_UINT,
    pub numspace: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_TextWidth() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TextWidth> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TextWidth>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_TextWidth))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TextWidth>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_TextWidth))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numchars) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TextWidth),
            "::",
            stringify!(numchars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numwords) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TextWidth),
            "::",
            stringify!(numwords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TextWidth),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numspace) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TextWidth),
            "::",
            stringify!(numspace)
        )
    );
}
pub type HPDF_TextWidth = _HPDF_TextWidth;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_DashMode {
    pub ptn: [HPDF_REAL; 8usize],
    pub num_ptn: HPDF_UINT,
    pub phase: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_DashMode() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_DashMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_DashMode>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_DashMode))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_DashMode>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_DashMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_DashMode),
            "::",
            stringify!(ptn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_ptn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_DashMode),
            "::",
            stringify!(num_ptn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_DashMode),
            "::",
            stringify!(phase)
        )
    );
}
pub type HPDF_DashMode = _HPDF_DashMode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TransMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_TransMatrix() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TransMatrix> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TransMatrix>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_TransMatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TransMatrix>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_TransMatrix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TransMatrix),
            "::",
            stringify!(y)
        )
    );
}
pub type HPDF_TransMatrix = _HPDF_TransMatrix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_3DMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub e: HPDF_REAL,
    pub f: HPDF_REAL,
    pub g: HPDF_REAL,
    pub h: HPDF_REAL,
    pub i: HPDF_REAL,
    pub tx: HPDF_REAL,
    pub ty: HPDF_REAL,
    pub tz: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_3DMatrix() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_3DMatrix> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_3DMatrix>(),
        48usize,
        concat!("Size of: ", stringify!(_HPDF_3DMatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_3DMatrix>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_3DMatrix))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_3DMatrix),
            "::",
            stringify!(tz)
        )
    );
}
pub type HPDF_3DMatrix = _HPDF_3DMatrix;
pub const _HPDF_ColorSpace_HPDF_CS_DEVICE_GRAY: _HPDF_ColorSpace = 0;
pub const _HPDF_ColorSpace_HPDF_CS_DEVICE_RGB: _HPDF_ColorSpace = 1;
pub const _HPDF_ColorSpace_HPDF_CS_DEVICE_CMYK: _HPDF_ColorSpace = 2;
pub const _HPDF_ColorSpace_HPDF_CS_CAL_GRAY: _HPDF_ColorSpace = 3;
pub const _HPDF_ColorSpace_HPDF_CS_CAL_RGB: _HPDF_ColorSpace = 4;
pub const _HPDF_ColorSpace_HPDF_CS_LAB: _HPDF_ColorSpace = 5;
pub const _HPDF_ColorSpace_HPDF_CS_ICC_BASED: _HPDF_ColorSpace = 6;
pub const _HPDF_ColorSpace_HPDF_CS_SEPARATION: _HPDF_ColorSpace = 7;
pub const _HPDF_ColorSpace_HPDF_CS_DEVICE_N: _HPDF_ColorSpace = 8;
pub const _HPDF_ColorSpace_HPDF_CS_INDEXED: _HPDF_ColorSpace = 9;
pub const _HPDF_ColorSpace_HPDF_CS_PATTERN: _HPDF_ColorSpace = 10;
pub const _HPDF_ColorSpace_HPDF_CS_EOF: _HPDF_ColorSpace = 11;
pub type _HPDF_ColorSpace = ::std::os::raw::c_uint;
pub use self::_HPDF_ColorSpace as HPDF_ColorSpace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_RGBColor {
    pub r: HPDF_REAL,
    pub g: HPDF_REAL,
    pub b: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_RGBColor() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_RGBColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_RGBColor>(),
        12usize,
        concat!("Size of: ", stringify!(_HPDF_RGBColor))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_RGBColor>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_RGBColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_RGBColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_RGBColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_RGBColor),
            "::",
            stringify!(b)
        )
    );
}
pub type HPDF_RGBColor = _HPDF_RGBColor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CMYKColor {
    pub c: HPDF_REAL,
    pub m: HPDF_REAL,
    pub y: HPDF_REAL,
    pub k: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_CMYKColor() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CMYKColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CMYKColor>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_CMYKColor))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CMYKColor>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_CMYKColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMYKColor),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMYKColor),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMYKColor),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMYKColor),
            "::",
            stringify!(k)
        )
    );
}
pub type HPDF_CMYKColor = _HPDF_CMYKColor;
pub const _HPDF_LineCap_HPDF_BUTT_END: _HPDF_LineCap = 0;
pub const _HPDF_LineCap_HPDF_ROUND_END: _HPDF_LineCap = 1;
pub const _HPDF_LineCap_HPDF_PROJECTING_SQUARE_END: _HPDF_LineCap = 2;
pub const _HPDF_LineCap_HPDF_LINECAP_EOF: _HPDF_LineCap = 3;
pub type _HPDF_LineCap = ::std::os::raw::c_uint;
pub use self::_HPDF_LineCap as HPDF_LineCap;
pub const _HPDF_LineJoin_HPDF_MITER_JOIN: _HPDF_LineJoin = 0;
pub const _HPDF_LineJoin_HPDF_ROUND_JOIN: _HPDF_LineJoin = 1;
pub const _HPDF_LineJoin_HPDF_BEVEL_JOIN: _HPDF_LineJoin = 2;
pub const _HPDF_LineJoin_HPDF_LINEJOIN_EOF: _HPDF_LineJoin = 3;
pub type _HPDF_LineJoin = ::std::os::raw::c_uint;
pub use self::_HPDF_LineJoin as HPDF_LineJoin;
pub const _HPDF_TextRenderingMode_HPDF_FILL: _HPDF_TextRenderingMode = 0;
pub const _HPDF_TextRenderingMode_HPDF_STROKE: _HPDF_TextRenderingMode = 1;
pub const _HPDF_TextRenderingMode_HPDF_FILL_THEN_STROKE: _HPDF_TextRenderingMode = 2;
pub const _HPDF_TextRenderingMode_HPDF_INVISIBLE: _HPDF_TextRenderingMode = 3;
pub const _HPDF_TextRenderingMode_HPDF_FILL_CLIPPING: _HPDF_TextRenderingMode = 4;
pub const _HPDF_TextRenderingMode_HPDF_STROKE_CLIPPING: _HPDF_TextRenderingMode = 5;
pub const _HPDF_TextRenderingMode_HPDF_FILL_STROKE_CLIPPING: _HPDF_TextRenderingMode = 6;
pub const _HPDF_TextRenderingMode_HPDF_CLIPPING: _HPDF_TextRenderingMode = 7;
pub const _HPDF_TextRenderingMode_HPDF_RENDERING_MODE_EOF: _HPDF_TextRenderingMode = 8;
pub type _HPDF_TextRenderingMode = ::std::os::raw::c_uint;
pub use self::_HPDF_TextRenderingMode as HPDF_TextRenderingMode;
pub const _HPDF_WritingMode_HPDF_WMODE_HORIZONTAL: _HPDF_WritingMode = 0;
pub const _HPDF_WritingMode_HPDF_WMODE_VERTICAL: _HPDF_WritingMode = 1;
pub const _HPDF_WritingMode_HPDF_WMODE_EOF: _HPDF_WritingMode = 2;
pub type _HPDF_WritingMode = ::std::os::raw::c_uint;
pub use self::_HPDF_WritingMode as HPDF_WritingMode;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_SINGLE: _HPDF_PageLayout = 0;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_ONE_COLUMN: _HPDF_PageLayout = 1;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT: _HPDF_PageLayout = 2;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT: _HPDF_PageLayout = 3;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_TWO_PAGE_LEFT: _HPDF_PageLayout = 4;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_TWO_PAGE_RIGHT: _HPDF_PageLayout = 5;
pub const _HPDF_PageLayout_HPDF_PAGE_LAYOUT_EOF: _HPDF_PageLayout = 6;
pub type _HPDF_PageLayout = ::std::os::raw::c_uint;
pub use self::_HPDF_PageLayout as HPDF_PageLayout;
pub const _HPDF_PageMode_HPDF_PAGE_MODE_USE_NONE: _HPDF_PageMode = 0;
pub const _HPDF_PageMode_HPDF_PAGE_MODE_USE_OUTLINE: _HPDF_PageMode = 1;
pub const _HPDF_PageMode_HPDF_PAGE_MODE_USE_THUMBS: _HPDF_PageMode = 2;
pub const _HPDF_PageMode_HPDF_PAGE_MODE_FULL_SCREEN: _HPDF_PageMode = 3;
pub const _HPDF_PageMode_HPDF_PAGE_MODE_EOF: _HPDF_PageMode = 4;
pub type _HPDF_PageMode = ::std::os::raw::c_uint;
pub use self::_HPDF_PageMode as HPDF_PageMode;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_DECIMAL: _HPDF_PageNumStyle = 0;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_UPPER_ROMAN: _HPDF_PageNumStyle = 1;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_LOWER_ROMAN: _HPDF_PageNumStyle = 2;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_UPPER_LETTERS: _HPDF_PageNumStyle = 3;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_LOWER_LETTERS: _HPDF_PageNumStyle = 4;
pub const _HPDF_PageNumStyle_HPDF_PAGE_NUM_STYLE_EOF: _HPDF_PageNumStyle = 5;
pub type _HPDF_PageNumStyle = ::std::os::raw::c_uint;
pub use self::_HPDF_PageNumStyle as HPDF_PageNumStyle;
pub const _HPDF_DestinationType_HPDF_XYZ: _HPDF_DestinationType = 0;
pub const _HPDF_DestinationType_HPDF_FIT: _HPDF_DestinationType = 1;
pub const _HPDF_DestinationType_HPDF_FIT_H: _HPDF_DestinationType = 2;
pub const _HPDF_DestinationType_HPDF_FIT_V: _HPDF_DestinationType = 3;
pub const _HPDF_DestinationType_HPDF_FIT_R: _HPDF_DestinationType = 4;
pub const _HPDF_DestinationType_HPDF_FIT_B: _HPDF_DestinationType = 5;
pub const _HPDF_DestinationType_HPDF_FIT_BH: _HPDF_DestinationType = 6;
pub const _HPDF_DestinationType_HPDF_FIT_BV: _HPDF_DestinationType = 7;
pub const _HPDF_DestinationType_HPDF_DST_EOF: _HPDF_DestinationType = 8;
pub type _HPDF_DestinationType = ::std::os::raw::c_uint;
pub use self::_HPDF_DestinationType as HPDF_DestinationType;
pub const _HPDF_AnnotType_HPDF_ANNOT_TEXT_NOTES: _HPDF_AnnotType = 0;
pub const _HPDF_AnnotType_HPDF_ANNOT_LINK: _HPDF_AnnotType = 1;
pub const _HPDF_AnnotType_HPDF_ANNOT_SOUND: _HPDF_AnnotType = 2;
pub const _HPDF_AnnotType_HPDF_ANNOT_FREE_TEXT: _HPDF_AnnotType = 3;
pub const _HPDF_AnnotType_HPDF_ANNOT_STAMP: _HPDF_AnnotType = 4;
pub const _HPDF_AnnotType_HPDF_ANNOT_SQUARE: _HPDF_AnnotType = 5;
pub const _HPDF_AnnotType_HPDF_ANNOT_CIRCLE: _HPDF_AnnotType = 6;
pub const _HPDF_AnnotType_HPDF_ANNOT_STRIKE_OUT: _HPDF_AnnotType = 7;
pub const _HPDF_AnnotType_HPDF_ANNOT_HIGHTLIGHT: _HPDF_AnnotType = 8;
pub const _HPDF_AnnotType_HPDF_ANNOT_UNDERLINE: _HPDF_AnnotType = 9;
pub const _HPDF_AnnotType_HPDF_ANNOT_INK: _HPDF_AnnotType = 10;
pub const _HPDF_AnnotType_HPDF_ANNOT_FILE_ATTACHMENT: _HPDF_AnnotType = 11;
pub const _HPDF_AnnotType_HPDF_ANNOT_POPUP: _HPDF_AnnotType = 12;
pub const _HPDF_AnnotType_HPDF_ANNOT_3D: _HPDF_AnnotType = 13;
pub const _HPDF_AnnotType_HPDF_ANNOT_SQUIGGLY: _HPDF_AnnotType = 14;
pub const _HPDF_AnnotType_HPDF_ANNOT_LINE: _HPDF_AnnotType = 15;
pub const _HPDF_AnnotType_HPDF_ANNOT_PROJECTION: _HPDF_AnnotType = 16;
pub const _HPDF_AnnotType_HPDF_ANNOT_WIDGET: _HPDF_AnnotType = 17;
pub type _HPDF_AnnotType = ::std::os::raw::c_uint;
pub use self::_HPDF_AnnotType as HPDF_AnnotType;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_INVISIBLE: _HPDF_AnnotFlgs = 0;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_HIDDEN: _HPDF_AnnotFlgs = 1;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_PRINT: _HPDF_AnnotFlgs = 2;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_NOZOOM: _HPDF_AnnotFlgs = 3;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_NOROTATE: _HPDF_AnnotFlgs = 4;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_NOVIEW: _HPDF_AnnotFlgs = 5;
pub const _HPDF_AnnotFlgs_HPDF_ANNOT_READONLY: _HPDF_AnnotFlgs = 6;
pub type _HPDF_AnnotFlgs = ::std::os::raw::c_uint;
pub use self::_HPDF_AnnotFlgs as HPDF_AnnotFlgs;
pub const _HPDF_AnnotHighlightMode_HPDF_ANNOT_NO_HIGHTLIGHT: _HPDF_AnnotHighlightMode = 0;
pub const _HPDF_AnnotHighlightMode_HPDF_ANNOT_INVERT_BOX: _HPDF_AnnotHighlightMode = 1;
pub const _HPDF_AnnotHighlightMode_HPDF_ANNOT_INVERT_BORDER: _HPDF_AnnotHighlightMode = 2;
pub const _HPDF_AnnotHighlightMode_HPDF_ANNOT_DOWN_APPEARANCE: _HPDF_AnnotHighlightMode = 3;
pub const _HPDF_AnnotHighlightMode_HPDF_ANNOT_HIGHTLIGHT_MODE_EOF: _HPDF_AnnotHighlightMode = 4;
pub type _HPDF_AnnotHighlightMode = ::std::os::raw::c_uint;
pub use self::_HPDF_AnnotHighlightMode as HPDF_AnnotHighlightMode;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_COMMENT: _HPDF_AnnotIcon = 0;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_KEY: _HPDF_AnnotIcon = 1;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_NOTE: _HPDF_AnnotIcon = 2;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_HELP: _HPDF_AnnotIcon = 3;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_NEW_PARAGRAPH: _HPDF_AnnotIcon = 4;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_PARAGRAPH: _HPDF_AnnotIcon = 5;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_INSERT: _HPDF_AnnotIcon = 6;
pub const _HPDF_AnnotIcon_HPDF_ANNOT_ICON_EOF: _HPDF_AnnotIcon = 7;
pub type _HPDF_AnnotIcon = ::std::os::raw::c_uint;
pub use self::_HPDF_AnnotIcon as HPDF_AnnotIcon;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_FREETEXTCALLOUT: _HPDF_AnnotIntent = 0;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_FREETEXTTYPEWRITER: _HPDF_AnnotIntent = 1;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_LINEARROW: _HPDF_AnnotIntent = 2;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_LINEDIMENSION: _HPDF_AnnotIntent = 3;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_POLYGONCLOUD: _HPDF_AnnotIntent = 4;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_POLYLINEDIMENSION: _HPDF_AnnotIntent = 5;
pub const _HPDF_AnnotIntent_HPDF_ANNOT_INTENT_POLYGONDIMENSION: _HPDF_AnnotIntent = 6;
pub type _HPDF_AnnotIntent = ::std::os::raw::c_uint;
pub use self::_HPDF_AnnotIntent as HPDF_AnnotIntent;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_NONE: _HPDF_LineAnnotEndingStyle = 0;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_SQUARE: _HPDF_LineAnnotEndingStyle = 1;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_CIRCLE: _HPDF_LineAnnotEndingStyle = 2;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_DIAMOND: _HPDF_LineAnnotEndingStyle = 3;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_OPENARROW: _HPDF_LineAnnotEndingStyle = 4;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_CLOSEDARROW: _HPDF_LineAnnotEndingStyle = 5;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_BUTT: _HPDF_LineAnnotEndingStyle = 6;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_ROPENARROW: _HPDF_LineAnnotEndingStyle = 7;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_RCLOSEDARROW: _HPDF_LineAnnotEndingStyle = 8;
pub const _HPDF_LineAnnotEndingStyle_HPDF_LINE_ANNOT_SLASH: _HPDF_LineAnnotEndingStyle = 9;
pub type _HPDF_LineAnnotEndingStyle = ::std::os::raw::c_uint;
pub use self::_HPDF_LineAnnotEndingStyle as HPDF_LineAnnotEndingStyle;
pub const _HPDF_LineAnnotCapPosition_HPDF_LINE_ANNOT_CAP_INLINE: _HPDF_LineAnnotCapPosition = 0;
pub const _HPDF_LineAnnotCapPosition_HPDF_LINE_ANNOT_CAP_TOP: _HPDF_LineAnnotCapPosition = 1;
pub type _HPDF_LineAnnotCapPosition = ::std::os::raw::c_uint;
pub use self::_HPDF_LineAnnotCapPosition as HPDF_LineAnnotCapPosition;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_APPROVED: _HPDF_StampAnnotName = 0;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_EXPERIMENTAL: _HPDF_StampAnnotName = 1;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_NOTAPPROVED: _HPDF_StampAnnotName = 2;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_ASIS: _HPDF_StampAnnotName = 3;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_EXPIRED: _HPDF_StampAnnotName = 4;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_NOTFORPUBLICRELEASE: _HPDF_StampAnnotName = 5;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_CONFIDENTIAL: _HPDF_StampAnnotName = 6;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_FINAL: _HPDF_StampAnnotName = 7;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_SOLD: _HPDF_StampAnnotName = 8;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_DEPARTMENTAL: _HPDF_StampAnnotName = 9;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_FORCOMMENT: _HPDF_StampAnnotName = 10;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_TOPSECRET: _HPDF_StampAnnotName = 11;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_DRAFT: _HPDF_StampAnnotName = 12;
pub const _HPDF_StampAnnotName_HPDF_STAMP_ANNOT_FORPUBLICRELEASE: _HPDF_StampAnnotName = 13;
pub type _HPDF_StampAnnotName = ::std::os::raw::c_uint;
pub use self::_HPDF_StampAnnotName as HPDF_StampAnnotName;
pub const _HPDF_BSSubtype_HPDF_BS_SOLID: _HPDF_BSSubtype = 0;
pub const _HPDF_BSSubtype_HPDF_BS_DASHED: _HPDF_BSSubtype = 1;
pub const _HPDF_BSSubtype_HPDF_BS_BEVELED: _HPDF_BSSubtype = 2;
pub const _HPDF_BSSubtype_HPDF_BS_INSET: _HPDF_BSSubtype = 3;
pub const _HPDF_BSSubtype_HPDF_BS_UNDERLINED: _HPDF_BSSubtype = 4;
pub type _HPDF_BSSubtype = ::std::os::raw::c_uint;
pub use self::_HPDF_BSSubtype as HPDF_BSSubtype;
pub const _HPDF_BlendMode_HPDF_BM_NORMAL: _HPDF_BlendMode = 0;
pub const _HPDF_BlendMode_HPDF_BM_MULTIPLY: _HPDF_BlendMode = 1;
pub const _HPDF_BlendMode_HPDF_BM_SCREEN: _HPDF_BlendMode = 2;
pub const _HPDF_BlendMode_HPDF_BM_OVERLAY: _HPDF_BlendMode = 3;
pub const _HPDF_BlendMode_HPDF_BM_DARKEN: _HPDF_BlendMode = 4;
pub const _HPDF_BlendMode_HPDF_BM_LIGHTEN: _HPDF_BlendMode = 5;
pub const _HPDF_BlendMode_HPDF_BM_COLOR_DODGE: _HPDF_BlendMode = 6;
pub const _HPDF_BlendMode_HPDF_BM_COLOR_BUM: _HPDF_BlendMode = 7;
pub const _HPDF_BlendMode_HPDF_BM_HARD_LIGHT: _HPDF_BlendMode = 8;
pub const _HPDF_BlendMode_HPDF_BM_SOFT_LIGHT: _HPDF_BlendMode = 9;
pub const _HPDF_BlendMode_HPDF_BM_DIFFERENCE: _HPDF_BlendMode = 10;
pub const _HPDF_BlendMode_HPDF_BM_EXCLUSHON: _HPDF_BlendMode = 11;
pub const _HPDF_BlendMode_HPDF_BM_EOF: _HPDF_BlendMode = 12;
pub type _HPDF_BlendMode = ::std::os::raw::c_uint;
pub use self::_HPDF_BlendMode as HPDF_BlendMode;
pub const _HPDF_TransitionStyle_HPDF_TS_WIPE_RIGHT: _HPDF_TransitionStyle = 0;
pub const _HPDF_TransitionStyle_HPDF_TS_WIPE_UP: _HPDF_TransitionStyle = 1;
pub const _HPDF_TransitionStyle_HPDF_TS_WIPE_LEFT: _HPDF_TransitionStyle = 2;
pub const _HPDF_TransitionStyle_HPDF_TS_WIPE_DOWN: _HPDF_TransitionStyle = 3;
pub const _HPDF_TransitionStyle_HPDF_TS_BARN_DOORS_HORIZONTAL_OUT: _HPDF_TransitionStyle = 4;
pub const _HPDF_TransitionStyle_HPDF_TS_BARN_DOORS_HORIZONTAL_IN: _HPDF_TransitionStyle = 5;
pub const _HPDF_TransitionStyle_HPDF_TS_BARN_DOORS_VERTICAL_OUT: _HPDF_TransitionStyle = 6;
pub const _HPDF_TransitionStyle_HPDF_TS_BARN_DOORS_VERTICAL_IN: _HPDF_TransitionStyle = 7;
pub const _HPDF_TransitionStyle_HPDF_TS_BOX_OUT: _HPDF_TransitionStyle = 8;
pub const _HPDF_TransitionStyle_HPDF_TS_BOX_IN: _HPDF_TransitionStyle = 9;
pub const _HPDF_TransitionStyle_HPDF_TS_BLINDS_HORIZONTAL: _HPDF_TransitionStyle = 10;
pub const _HPDF_TransitionStyle_HPDF_TS_BLINDS_VERTICAL: _HPDF_TransitionStyle = 11;
pub const _HPDF_TransitionStyle_HPDF_TS_DISSOLVE: _HPDF_TransitionStyle = 12;
pub const _HPDF_TransitionStyle_HPDF_TS_GLITTER_RIGHT: _HPDF_TransitionStyle = 13;
pub const _HPDF_TransitionStyle_HPDF_TS_GLITTER_DOWN: _HPDF_TransitionStyle = 14;
pub const _HPDF_TransitionStyle_HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT: _HPDF_TransitionStyle =
    15;
pub const _HPDF_TransitionStyle_HPDF_TS_REPLACE: _HPDF_TransitionStyle = 16;
pub const _HPDF_TransitionStyle_HPDF_TS_EOF: _HPDF_TransitionStyle = 17;
pub type _HPDF_TransitionStyle = ::std::os::raw::c_uint;
pub use self::_HPDF_TransitionStyle as HPDF_TransitionStyle;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_LETTER: _HPDF_PageSizes = 0;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_LEGAL: _HPDF_PageSizes = 1;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_A3: _HPDF_PageSizes = 2;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_A4: _HPDF_PageSizes = 3;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_A5: _HPDF_PageSizes = 4;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_B4: _HPDF_PageSizes = 5;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_B5: _HPDF_PageSizes = 6;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_EXECUTIVE: _HPDF_PageSizes = 7;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_US4x6: _HPDF_PageSizes = 8;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_US4x8: _HPDF_PageSizes = 9;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_US5x7: _HPDF_PageSizes = 10;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_COMM10: _HPDF_PageSizes = 11;
pub const _HPDF_PageSizes_HPDF_PAGE_SIZE_EOF: _HPDF_PageSizes = 12;
pub type _HPDF_PageSizes = ::std::os::raw::c_uint;
pub use self::_HPDF_PageSizes as HPDF_PageSizes;
pub const _HPDF_PageDirection_HPDF_PAGE_PORTRAIT: _HPDF_PageDirection = 0;
pub const _HPDF_PageDirection_HPDF_PAGE_LANDSCAPE: _HPDF_PageDirection = 1;
pub type _HPDF_PageDirection = ::std::os::raw::c_uint;
pub use self::_HPDF_PageDirection as HPDF_PageDirection;
pub const _HPDF_EncoderType_HPDF_ENCODER_TYPE_SINGLE_BYTE: _HPDF_EncoderType = 0;
pub const _HPDF_EncoderType_HPDF_ENCODER_TYPE_DOUBLE_BYTE: _HPDF_EncoderType = 1;
pub const _HPDF_EncoderType_HPDF_ENCODER_TYPE_UNINITIALIZED: _HPDF_EncoderType = 2;
pub const _HPDF_EncoderType_HPDF_ENCODER_UNKNOWN: _HPDF_EncoderType = 3;
pub type _HPDF_EncoderType = ::std::os::raw::c_uint;
pub use self::_HPDF_EncoderType as HPDF_EncoderType;
pub const _HPDF_ByteType_HPDF_BYTE_TYPE_SINGLE: _HPDF_ByteType = 0;
pub const _HPDF_ByteType_HPDF_BYTE_TYPE_LEAD: _HPDF_ByteType = 1;
pub const _HPDF_ByteType_HPDF_BYTE_TYPE_TRAIL: _HPDF_ByteType = 2;
pub const _HPDF_ByteType_HPDF_BYTE_TYPE_UNKNOWN: _HPDF_ByteType = 3;
pub type _HPDF_ByteType = ::std::os::raw::c_uint;
pub use self::_HPDF_ByteType as HPDF_ByteType;
pub const _HPDF_TextAlignment_HPDF_TALIGN_LEFT: _HPDF_TextAlignment = 0;
pub const _HPDF_TextAlignment_HPDF_TALIGN_RIGHT: _HPDF_TextAlignment = 1;
pub const _HPDF_TextAlignment_HPDF_TALIGN_CENTER: _HPDF_TextAlignment = 2;
pub const _HPDF_TextAlignment_HPDF_TALIGN_JUSTIFY: _HPDF_TextAlignment = 3;
pub type _HPDF_TextAlignment = ::std::os::raw::c_uint;
pub use self::_HPDF_TextAlignment as HPDF_TextAlignment;
pub const _HPDF_NameDictKey_HPDF_NAME_EMBEDDED_FILES: _HPDF_NameDictKey = 0;
pub const _HPDF_NameDictKey_HPDF_NAME_EOF: _HPDF_NameDictKey = 1;
pub type _HPDF_NameDictKey = ::std::os::raw::c_uint;
pub use self::_HPDF_NameDictKey as HPDF_NameDictKey;
pub const _HPDF_PageBoundary_HPDF_PAGE_MEDIABOX: _HPDF_PageBoundary = 0;
pub const _HPDF_PageBoundary_HPDF_PAGE_CROPBOX: _HPDF_PageBoundary = 1;
pub const _HPDF_PageBoundary_HPDF_PAGE_BLEEDBOX: _HPDF_PageBoundary = 2;
pub const _HPDF_PageBoundary_HPDF_PAGE_TRIMBOX: _HPDF_PageBoundary = 3;
pub const _HPDF_PageBoundary_HPDF_PAGE_ARTBOX: _HPDF_PageBoundary = 4;
pub type _HPDF_PageBoundary = ::std::os::raw::c_uint;
pub use self::_HPDF_PageBoundary as HPDF_PageBoundary;
pub const _HPDF_ShadingType_HPDF_SHADING_FREE_FORM_TRIANGLE_MESH: _HPDF_ShadingType = 4;
pub type _HPDF_ShadingType = ::std::os::raw::c_uint;
pub use self::_HPDF_ShadingType as HPDF_ShadingType;
pub const _HPDF_Shading_FreeFormTriangleMeshEdgeFlag_HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_NO_CONNECTION : _HPDF_Shading_FreeFormTriangleMeshEdgeFlag = 0 ;
pub const _HPDF_Shading_FreeFormTriangleMeshEdgeFlag_HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_BC:
    _HPDF_Shading_FreeFormTriangleMeshEdgeFlag = 1;
pub const _HPDF_Shading_FreeFormTriangleMeshEdgeFlag_HPDF_FREE_FORM_TRI_MESH_EDGEFLAG_AC:
    _HPDF_Shading_FreeFormTriangleMeshEdgeFlag = 2;
pub type _HPDF_Shading_FreeFormTriangleMeshEdgeFlag = ::std::os::raw::c_uint;
pub use self::_HPDF_Shading_FreeFormTriangleMeshEdgeFlag as HPDF_Shading_FreeFormTriangleMeshEdgeFlag;
pub type HPDF_Error = *mut _HPDF_Error_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Error_Rec {
    pub error_no: HPDF_STATUS,
    pub detail_no: HPDF_STATUS,
    pub error_fn: HPDF_Error_Handler,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_Error_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Error_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Error_Rec>(),
        32usize,
        concat!("Size of: ", stringify!(_HPDF_Error_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Error_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Error_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Error_Rec),
            "::",
            stringify!(error_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detail_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Error_Rec),
            "::",
            stringify!(detail_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_fn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Error_Rec),
            "::",
            stringify!(error_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Error_Rec),
            "::",
            stringify!(user_data)
        )
    );
}
pub type HPDF_Error_Rec = _HPDF_Error_Rec;
extern "C" {
    pub fn HPDF_Error_Init(error: HPDF_Error, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn HPDF_Error_Reset(error: HPDF_Error);
}
extern "C" {
    pub fn HPDF_Error_GetCode(error: HPDF_Error) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Error_GetDetailCode(error: HPDF_Error) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetError(
        error: HPDF_Error,
        error_no: HPDF_STATUS,
        detail_no: HPDF_STATUS,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_RaiseError(
        error: HPDF_Error,
        error_no: HPDF_STATUS,
        detail_no: HPDF_STATUS,
    ) -> HPDF_STATUS;
}
pub type HPDF_MPool_Node = *mut _HPDF_MPool_Node_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_MPool_Node_Rec {
    pub buf: *mut HPDF_BYTE,
    pub size: HPDF_UINT,
    pub used_size: HPDF_UINT,
    pub next_node: HPDF_MPool_Node,
}
#[test]
fn bindgen_test_layout__HPDF_MPool_Node_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_MPool_Node_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_MPool_Node_Rec>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_MPool_Node_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_MPool_Node_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_MPool_Node_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MPool_Node_Rec),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MPool_Node_Rec),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MPool_Node_Rec),
            "::",
            stringify!(used_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_node) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MPool_Node_Rec),
            "::",
            stringify!(next_node)
        )
    );
}
pub type HPDF_MPool_Node_Rec = _HPDF_MPool_Node_Rec;
pub type HPDF_MMgr = *mut _HPDF_MMgr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_MMgr_Rec {
    pub error: HPDF_Error,
    pub alloc_fn: HPDF_Alloc_Func,
    pub free_fn: HPDF_Free_Func,
    pub mpool: HPDF_MPool_Node,
    pub buf_size: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_MMgr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_MMgr_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_MMgr_Rec>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_MMgr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_MMgr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_MMgr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MMgr_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_fn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MMgr_Rec),
            "::",
            stringify!(alloc_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MMgr_Rec),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpool) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MMgr_Rec),
            "::",
            stringify!(mpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MMgr_Rec),
            "::",
            stringify!(buf_size)
        )
    );
}
pub type HPDF_MMgr_Rec = _HPDF_MMgr_Rec;
extern "C" {
    pub fn HPDF_MMgr_New(
        error: HPDF_Error,
        buf_size: HPDF_UINT,
        alloc_fn: HPDF_Alloc_Func,
        free_fn: HPDF_Free_Func,
    ) -> HPDF_MMgr;
}
extern "C" {
    pub fn HPDF_MMgr_Free(mmgr: HPDF_MMgr);
}
extern "C" {
    pub fn HPDF_GetMem(mmgr: HPDF_MMgr, size: HPDF_UINT) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_FreeMem(mmgr: HPDF_MMgr, aptr: *mut ::std::os::raw::c_void);
}
pub type HPDF_List = *mut _HPDF_List_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_List_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub block_siz: HPDF_UINT,
    pub items_per_block: HPDF_UINT,
    pub count: HPDF_UINT,
    pub obj: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_List_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_List_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_List_Rec>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_List_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_List_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_List_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block_siz) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(block_siz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items_per_block) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(items_per_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_List_Rec),
            "::",
            stringify!(obj)
        )
    );
}
pub type HPDF_List_Rec = _HPDF_List_Rec;
extern "C" {
    pub fn HPDF_List_New(mmgr: HPDF_MMgr, items_per_block: HPDF_UINT) -> HPDF_List;
}
extern "C" {
    pub fn HPDF_List_Free(list: HPDF_List);
}
extern "C" {
    pub fn HPDF_List_Add(list: HPDF_List, item: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_List_Insert(
        list: HPDF_List,
        target: *mut ::std::os::raw::c_void,
        item: *mut ::std::os::raw::c_void,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_List_Remove(list: HPDF_List, item: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_List_RemoveByIndex(
        list: HPDF_List,
        index: HPDF_UINT,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_List_ItemAt(list: HPDF_List, index: HPDF_UINT) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_List_Find(list: HPDF_List, item: *mut ::std::os::raw::c_void) -> HPDF_INT32;
}
extern "C" {
    pub fn HPDF_List_Clear(list: HPDF_List);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPDF_MD5Context {
    pub buf: [HPDF_UINT32; 4usize],
    pub bits: [HPDF_UINT32; 2usize],
    pub in_: [HPDF_BYTE; 64usize],
}
#[test]
fn bindgen_test_layout_HPDF_MD5Context() {
    const UNINIT: ::std::mem::MaybeUninit<HPDF_MD5Context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HPDF_MD5Context>(),
        88usize,
        concat!("Size of: ", stringify!(HPDF_MD5Context))
    );
    assert_eq!(
        ::std::mem::align_of::<HPDF_MD5Context>(),
        4usize,
        concat!("Alignment of ", stringify!(HPDF_MD5Context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HPDF_MD5Context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HPDF_MD5Context),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HPDF_MD5Context),
            "::",
            stringify!(in_)
        )
    );
}
pub type HPDF_MD5_CTX = HPDF_MD5Context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_ARC4_Ctx_Rec {
    pub idx1: HPDF_BYTE,
    pub idx2: HPDF_BYTE,
    pub state: [HPDF_BYTE; 256usize],
}
#[test]
fn bindgen_test_layout__HPDF_ARC4_Ctx_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_ARC4_Ctx_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_ARC4_Ctx_Rec>(),
        258usize,
        concat!("Size of: ", stringify!(_HPDF_ARC4_Ctx_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_ARC4_Ctx_Rec>(),
        1usize,
        concat!("Alignment of ", stringify!(_HPDF_ARC4_Ctx_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ARC4_Ctx_Rec),
            "::",
            stringify!(idx1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ARC4_Ctx_Rec),
            "::",
            stringify!(idx2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ARC4_Ctx_Rec),
            "::",
            stringify!(state)
        )
    );
}
pub type HPDF_ARC4_Ctx_Rec = _HPDF_ARC4_Ctx_Rec;
pub type HPDF_Encrypt = *mut _HPDF_Encrypt_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Encrypt_Rec {
    pub mode: HPDF_EncryptMode,
    pub key_len: HPDF_UINT,
    pub owner_passwd: [HPDF_BYTE; 32usize],
    pub user_passwd: [HPDF_BYTE; 32usize],
    pub owner_key: [HPDF_BYTE; 32usize],
    pub user_key: [HPDF_BYTE; 32usize],
    pub permission: HPDF_INT,
    pub encrypt_id: [HPDF_BYTE; 16usize],
    pub encryption_key: [HPDF_BYTE; 21usize],
    pub md5_encryption_key: [HPDF_BYTE; 16usize],
    pub arc4ctx: HPDF_ARC4_Ctx_Rec,
}
#[test]
fn bindgen_test_layout__HPDF_Encrypt_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Encrypt_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Encrypt_Rec>(),
        452usize,
        concat!("Size of: ", stringify!(_HPDF_Encrypt_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Encrypt_Rec>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Encrypt_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner_passwd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(owner_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_passwd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(user_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner_key) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(owner_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_key) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(user_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).permission) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(permission)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encrypt_id) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(encrypt_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encryption_key) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(encryption_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md5_encryption_key) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(md5_encryption_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc4ctx) as usize - ptr as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encrypt_Rec),
            "::",
            stringify!(arc4ctx)
        )
    );
}
pub type HPDF_Encrypt_Rec = _HPDF_Encrypt_Rec;
extern "C" {
    pub fn HPDF_MD5Init(ctx: *mut HPDF_MD5Context);
}
extern "C" {
    pub fn HPDF_MD5Update(ctx: *mut HPDF_MD5Context, buf: *const HPDF_BYTE, len: HPDF_UINT32);
}
extern "C" {
    pub fn HPDF_MD5Final(digest: *mut HPDF_BYTE, ctx: *mut HPDF_MD5Context);
}
extern "C" {
    pub fn HPDF_PadOrTrancatePasswd(pwd: *const ::std::os::raw::c_char, new_pwd: *mut HPDF_BYTE);
}
extern "C" {
    pub fn HPDF_Encrypt_Init(attr: HPDF_Encrypt);
}
extern "C" {
    pub fn HPDF_Encrypt_CreateUserKey(attr: HPDF_Encrypt);
}
extern "C" {
    pub fn HPDF_Encrypt_CreateOwnerKey(attr: HPDF_Encrypt);
}
extern "C" {
    pub fn HPDF_Encrypt_CreateEncryptionKey(attr: HPDF_Encrypt);
}
extern "C" {
    pub fn HPDF_Encrypt_InitKey(attr: HPDF_Encrypt, object_id: HPDF_UINT32, gen_no: HPDF_UINT16);
}
extern "C" {
    pub fn HPDF_Encrypt_Reset(attr: HPDF_Encrypt);
}
extern "C" {
    pub fn HPDF_Encrypt_CryptBuf(
        attr: HPDF_Encrypt,
        src: *const HPDF_BYTE,
        dst: *mut HPDF_BYTE,
        len: HPDF_UINT,
    );
}
pub const _HPDF_StreamType_HPDF_STREAM_UNKNOWN: _HPDF_StreamType = 0;
pub const _HPDF_StreamType_HPDF_STREAM_CALLBACK: _HPDF_StreamType = 1;
pub const _HPDF_StreamType_HPDF_STREAM_FILE: _HPDF_StreamType = 2;
pub const _HPDF_StreamType_HPDF_STREAM_MEMORY: _HPDF_StreamType = 3;
pub type _HPDF_StreamType = ::std::os::raw::c_uint;
pub use self::_HPDF_StreamType as HPDF_StreamType;
pub const _HPDF_WhenceMode_HPDF_SEEK_SET: _HPDF_WhenceMode = 0;
pub const _HPDF_WhenceMode_HPDF_SEEK_CUR: _HPDF_WhenceMode = 1;
pub const _HPDF_WhenceMode_HPDF_SEEK_END: _HPDF_WhenceMode = 2;
pub type _HPDF_WhenceMode = ::std::os::raw::c_uint;
pub use self::_HPDF_WhenceMode as HPDF_WhenceMode;
pub type HPDF_Stream = *mut _HPDF_Stream_Rec;
pub type HPDF_Stream_Write_Func = ::std::option::Option<
    unsafe extern "C" fn(stream: HPDF_Stream, ptr: *const HPDF_BYTE, siz: HPDF_UINT) -> HPDF_STATUS,
>;
pub type HPDF_Stream_Read_Func = ::std::option::Option<
    unsafe extern "C" fn(
        stream: HPDF_Stream,
        ptr: *mut HPDF_BYTE,
        siz: *mut HPDF_UINT,
    ) -> HPDF_STATUS,
>;
pub type HPDF_Stream_Seek_Func = ::std::option::Option<
    unsafe extern "C" fn(stream: HPDF_Stream, pos: HPDF_INT, mode: HPDF_WhenceMode) -> HPDF_STATUS,
>;
pub type HPDF_Stream_Tell_Func =
    ::std::option::Option<unsafe extern "C" fn(stream: HPDF_Stream) -> HPDF_INT32>;
pub type HPDF_Stream_Free_Func = ::std::option::Option<unsafe extern "C" fn(stream: HPDF_Stream)>;
pub type HPDF_Stream_Size_Func =
    ::std::option::Option<unsafe extern "C" fn(stream: HPDF_Stream) -> HPDF_UINT32>;
pub type HPDF_MemStreamAttr = *mut _HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_MemStreamAttr_Rec {
    pub buf: HPDF_List,
    pub buf_siz: HPDF_UINT,
    pub w_pos: HPDF_UINT,
    pub w_ptr: *mut HPDF_BYTE,
    pub r_ptr_idx: HPDF_UINT,
    pub r_pos: HPDF_UINT,
    pub r_ptr: *mut HPDF_BYTE,
}
#[test]
fn bindgen_test_layout__HPDF_MemStreamAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_MemStreamAttr_Rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_MemStreamAttr_Rec>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_MemStreamAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_MemStreamAttr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_MemStreamAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf_siz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(buf_siz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_pos) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(w_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(w_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_ptr_idx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(r_ptr_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_pos) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(r_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_ptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_MemStreamAttr_Rec),
            "::",
            stringify!(r_ptr)
        )
    );
}
pub type HPDF_MemStreamAttr_Rec = _HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Stream_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub type_: HPDF_StreamType,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub size: HPDF_UINT,
    pub write_fn: HPDF_Stream_Write_Func,
    pub read_fn: HPDF_Stream_Read_Func,
    pub seek_fn: HPDF_Stream_Seek_Func,
    pub free_fn: HPDF_Stream_Free_Func,
    pub tell_fn: HPDF_Stream_Tell_Func,
    pub size_fn: HPDF_Stream_Size_Func,
    pub attr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_Stream_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Stream_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Stream_Rec>(),
        88usize,
        concat!("Size of: ", stringify!(_HPDF_Stream_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Stream_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Stream_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(sig_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(write_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_fn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(read_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek_fn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(seek_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tell_fn) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(tell_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_fn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(size_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Stream_Rec),
            "::",
            stringify!(attr)
        )
    );
}
pub type HPDF_Stream_Rec = _HPDF_Stream_Rec;
extern "C" {
    pub fn HPDF_MemStream_New(mmgr: HPDF_MMgr, buf_siz: HPDF_UINT) -> HPDF_Stream;
}
extern "C" {
    pub fn HPDF_MemStream_GetBufPtr(
        stream: HPDF_Stream,
        index: HPDF_UINT,
        length: *mut HPDF_UINT,
    ) -> *mut HPDF_BYTE;
}
extern "C" {
    pub fn HPDF_MemStream_GetBufSize(stream: HPDF_Stream) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_MemStream_GetBufCount(stream: HPDF_Stream) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_MemStream_Rewrite(
        stream: HPDF_Stream,
        buf: *mut HPDF_BYTE,
        size: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MemStream_FreeData(stream: HPDF_Stream);
}
extern "C" {
    pub fn HPDF_Stream_WriteToStream(
        src: HPDF_Stream,
        dst: HPDF_Stream,
        filter: HPDF_UINT,
        e: HPDF_Encrypt,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FileReader_New(
        mmgr: HPDF_MMgr,
        fname: *const ::std::os::raw::c_char,
    ) -> HPDF_Stream;
}
extern "C" {
    pub fn HPDF_FileWriter_New(
        mmgr: HPDF_MMgr,
        fname: *const ::std::os::raw::c_char,
    ) -> HPDF_Stream;
}
extern "C" {
    pub fn HPDF_CallbackReader_New(
        mmgr: HPDF_MMgr,
        read_fn: HPDF_Stream_Read_Func,
        seek_fn: HPDF_Stream_Seek_Func,
        tell_fn: HPDF_Stream_Tell_Func,
        size_fn: HPDF_Stream_Size_Func,
        data: *mut ::std::os::raw::c_void,
    ) -> HPDF_Stream;
}
extern "C" {
    pub fn HPDF_CallbackWriter_New(
        mmgr: HPDF_MMgr,
        write_fn: HPDF_Stream_Write_Func,
        data: *mut ::std::os::raw::c_void,
    ) -> HPDF_Stream;
}
extern "C" {
    pub fn HPDF_Stream_Free(stream: HPDF_Stream);
}
extern "C" {
    pub fn HPDF_Stream_WriteChar(stream: HPDF_Stream, value: ::std::os::raw::c_char)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteStr(
        stream: HPDF_Stream,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteUChar(stream: HPDF_Stream, value: HPDF_BYTE) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteInt(stream: HPDF_Stream, value: HPDF_INT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteUInt(stream: HPDF_Stream, value: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteReal(stream: HPDF_Stream, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_Write(
        stream: HPDF_Stream,
        ptr: *const HPDF_BYTE,
        size: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_Read(
        stream: HPDF_Stream,
        ptr: *mut HPDF_BYTE,
        size: *mut HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_ReadLn(
        stream: HPDF_Stream,
        s: *mut ::std::os::raw::c_char,
        size: *mut HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_Tell(stream: HPDF_Stream) -> HPDF_INT32;
}
extern "C" {
    pub fn HPDF_Stream_Seek(
        stream: HPDF_Stream,
        pos: HPDF_INT,
        mode: HPDF_WhenceMode,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_EOF(stream: HPDF_Stream) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Stream_Size(stream: HPDF_Stream) -> HPDF_UINT32;
}
extern "C" {
    pub fn HPDF_Stream_Flush(stream: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteEscapeName(
        stream: HPDF_Stream,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteEscapeText2(
        stream: HPDF_Stream,
        text: *const ::std::os::raw::c_char,
        len: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteEscapeText(
        stream: HPDF_Stream,
        text: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_WriteBinary(
        stream: HPDF_Stream,
        data: *const HPDF_BYTE,
        len: HPDF_UINT,
        e: HPDF_Encrypt,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Stream_Validate(stream: HPDF_Stream) -> HPDF_STATUS;
}
pub const _HPDF_EncodingType_HPDF_STANDARD_ENCODING: _HPDF_EncodingType = 0;
pub const _HPDF_EncodingType_HPDF_MAC_ROMAN_ENCODING: _HPDF_EncodingType = 1;
pub const _HPDF_EncodingType_HPDF_WIN_ANSI_ENCODING: _HPDF_EncodingType = 2;
pub const _HPDF_EncodingType_HPDF_FONT_SPECIFIC: _HPDF_EncodingType = 3;
pub const _HPDF_EncodingType_HPDF_ENCODING_EOF: _HPDF_EncodingType = 4;
pub type _HPDF_EncodingType = ::std::os::raw::c_uint;
pub use self::_HPDF_EncodingType as HPDF_EncodingType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_ParseText_Rec {
    pub text: *const HPDF_BYTE,
    pub index: HPDF_UINT,
    pub len: HPDF_UINT,
    pub byte_type: HPDF_ByteType,
}
#[test]
fn bindgen_test_layout__HPDF_ParseText_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_ParseText_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_ParseText_Rec>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_ParseText_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_ParseText_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_ParseText_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ParseText_Rec),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ParseText_Rec),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ParseText_Rec),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_ParseText_Rec),
            "::",
            stringify!(byte_type)
        )
    );
}
pub type HPDF_ParseText_Rec = _HPDF_ParseText_Rec;
pub type HPDF_Encoder = *mut _HPDF_Encoder_Rec;
pub type HPDF_Encoder_ByteType_Func = ::std::option::Option<
    unsafe extern "C" fn(encoder: HPDF_Encoder, state: *mut HPDF_ParseText_Rec) -> HPDF_ByteType,
>;
pub type HPDF_Encoder_ToUnicode_Func = ::std::option::Option<
    unsafe extern "C" fn(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UNICODE,
>;
pub type HPDF_Encoder_EncodeText_Func = ::std::option::Option<
    unsafe extern "C" fn(
        encoder: HPDF_Encoder,
        text: *const ::std::os::raw::c_char,
        len: HPDF_UINT,
        encoded_length: *mut HPDF_UINT,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type HPDF_Encoder_Write_Func = ::std::option::Option<
    unsafe extern "C" fn(encoder: HPDF_Encoder, out: HPDF_Stream) -> HPDF_STATUS,
>;
pub type HPDF_Encoder_Init_Func =
    ::std::option::Option<unsafe extern "C" fn(encoder: HPDF_Encoder) -> HPDF_STATUS>;
pub type HPDF_Encoder_Free_Func =
    ::std::option::Option<unsafe extern "C" fn(encoder: HPDF_Encoder)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Encoder_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub name: [::std::os::raw::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub type_: HPDF_EncoderType,
    pub byte_type_fn: HPDF_Encoder_ByteType_Func,
    pub to_unicode_fn: HPDF_Encoder_ToUnicode_Func,
    pub encode_text_fn: HPDF_Encoder_EncodeText_Func,
    pub write_fn: HPDF_Encoder_Write_Func,
    pub free_fn: HPDF_Encoder_Free_Func,
    pub init_fn: HPDF_Encoder_Init_Func,
    pub attr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_Encoder_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Encoder_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Encoder_Rec>(),
        216usize,
        concat!("Size of: ", stringify!(_HPDF_Encoder_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Encoder_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Encoder_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(sig_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_type_fn) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(byte_type_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_unicode_fn) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(to_unicode_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encode_text_fn) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(encode_text_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_fn) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(write_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_fn) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(init_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Encoder_Rec),
            "::",
            stringify!(attr)
        )
    );
}
pub type HPDF_Encoder_Rec = _HPDF_Encoder_Rec;
pub const _HPDF_BaseEncodings_HPDF_BASE_ENCODING_STANDARD: _HPDF_BaseEncodings = 0;
pub const _HPDF_BaseEncodings_HPDF_BASE_ENCODING_WIN_ANSI: _HPDF_BaseEncodings = 1;
pub const _HPDF_BaseEncodings_HPDF_BASE_ENCODING_MAC_ROMAN: _HPDF_BaseEncodings = 2;
pub const _HPDF_BaseEncodings_HPDF_BASE_ENCODING_FONT_SPECIFIC: _HPDF_BaseEncodings = 3;
pub const _HPDF_BaseEncodings_HPDF_BASE_ENCODING_EOF: _HPDF_BaseEncodings = 4;
pub type _HPDF_BaseEncodings = ::std::os::raw::c_uint;
pub use self::_HPDF_BaseEncodings as HPDF_BaseEncodings;
extern "C" {
    pub fn HPDF_Encoder_Validate(encoder: HPDF_Encoder) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Encoder_SetParseText(
        encoder: HPDF_Encoder,
        state: *mut HPDF_ParseText_Rec,
        text: *const HPDF_BYTE,
        len: HPDF_UINT,
    );
}
extern "C" {
    pub fn HPDF_Encoder_ByteType(
        encoder: HPDF_Encoder,
        state: *mut HPDF_ParseText_Rec,
    ) -> HPDF_ByteType;
}
extern "C" {
    pub fn HPDF_Encoder_ToUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UNICODE;
}
extern "C" {
    pub fn HPDF_Encoder_Free(encoder: HPDF_Encoder);
}
pub type HPDF_BasicEncoderAttr = *mut _HPDF_BasicEncoderAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_BasicEncoderAttr_Rec {
    pub base_encoding: [::std::os::raw::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub unicode_map: [HPDF_UNICODE; 256usize],
    pub has_differences: HPDF_BOOL,
    pub differences: [HPDF_BYTE; 256usize],
}
#[test]
fn bindgen_test_layout__HPDF_BasicEncoderAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_BasicEncoderAttr_Rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_BasicEncoderAttr_Rec>(),
        904usize,
        concat!("Size of: ", stringify!(_HPDF_BasicEncoderAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_BasicEncoderAttr_Rec>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_BasicEncoderAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_encoding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(base_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_char) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(first_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_char) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(last_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode_map) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(unicode_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_differences) as usize - ptr as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(has_differences)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).differences) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_BasicEncoderAttr_Rec),
            "::",
            stringify!(differences)
        )
    );
}
pub type HPDF_BasicEncoderAttr_Rec = _HPDF_BasicEncoderAttr_Rec;
extern "C" {
    pub fn HPDF_BasicEncoder_New(
        mmgr: HPDF_MMgr,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_Encoder;
}
extern "C" {
    pub fn HPDF_BasicEncoder_Free(encoder: HPDF_Encoder);
}
extern "C" {
    pub fn HPDF_BasicEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_BasicEncoder_ToUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UNICODE;
}
pub type HPDF_CMapEncoder_ByteType_Func =
    ::std::option::Option<unsafe extern "C" fn(encoder: HPDF_Encoder, b: HPDF_BYTE) -> HPDF_BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CidRange_Rec {
    pub from: HPDF_UINT16,
    pub to: HPDF_UINT16,
    pub cid: HPDF_UINT16,
}
#[test]
fn bindgen_test_layout__HPDF_CidRange_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CidRange_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CidRange_Rec>(),
        6usize,
        concat!("Size of: ", stringify!(_HPDF_CidRange_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CidRange_Rec>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_CidRange_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CidRange_Rec),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CidRange_Rec),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CidRange_Rec),
            "::",
            stringify!(cid)
        )
    );
}
pub type HPDF_CidRange_Rec = _HPDF_CidRange_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_UnicodeMap_Rec {
    pub code: HPDF_UINT16,
    pub unicode: HPDF_UINT16,
}
#[test]
fn bindgen_test_layout__HPDF_UnicodeMap_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_UnicodeMap_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_UnicodeMap_Rec>(),
        4usize,
        concat!("Size of: ", stringify!(_HPDF_UnicodeMap_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_UnicodeMap_Rec>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_UnicodeMap_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_UnicodeMap_Rec),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_UnicodeMap_Rec),
            "::",
            stringify!(unicode)
        )
    );
}
pub type HPDF_UnicodeMap_Rec = _HPDF_UnicodeMap_Rec;
pub type HPDF_CMapEncoderAttr = *mut _HPDF_CMapEncoderAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CMapEncoderAttr_Rec {
    pub unicode_map: [[HPDF_UNICODE; 256usize]; 256usize],
    pub cid_map: [[HPDF_UINT16; 256usize]; 256usize],
    pub jww_line_head: [HPDF_UINT16; 128usize],
    pub cmap_range: HPDF_List,
    pub notdef_range: HPDF_List,
    pub code_space_range: HPDF_List,
    pub writing_mode: HPDF_WritingMode,
    pub registry: [::std::os::raw::c_char; 128usize],
    pub ordering: [::std::os::raw::c_char; 128usize],
    pub suppliment: HPDF_INT,
    pub is_lead_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub is_trial_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub uid_offset: HPDF_INT,
    pub xuid: [HPDF_UINT; 3usize],
}
#[test]
fn bindgen_test_layout__HPDF_CMapEncoderAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CMapEncoderAttr_Rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CMapEncoderAttr_Rec>(),
        262720usize,
        concat!("Size of: ", stringify!(_HPDF_CMapEncoderAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CMapEncoderAttr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_CMapEncoderAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode_map) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(unicode_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cid_map) as usize - ptr as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(cid_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jww_line_head) as usize - ptr as usize },
        262144usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(jww_line_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmap_range) as usize - ptr as usize },
        262400usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(cmap_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notdef_range) as usize - ptr as usize },
        262408usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(notdef_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_space_range) as usize - ptr as usize },
        262416usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(code_space_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writing_mode) as usize - ptr as usize },
        262424usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(writing_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).registry) as usize - ptr as usize },
        262428usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(registry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordering) as usize - ptr as usize },
        262556usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suppliment) as usize - ptr as usize },
        262684usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(suppliment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_lead_byte_fn) as usize - ptr as usize },
        262688usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(is_lead_byte_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_trial_byte_fn) as usize - ptr as usize },
        262696usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(is_trial_byte_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid_offset) as usize - ptr as usize },
        262704usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(uid_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xuid) as usize - ptr as usize },
        262708usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CMapEncoderAttr_Rec),
            "::",
            stringify!(xuid)
        )
    );
}
pub type HPDF_CMapEncoderAttr_Rec = _HPDF_CMapEncoderAttr_Rec;
extern "C" {
    pub fn HPDF_CMapEncoder_New(
        mmgr: HPDF_MMgr,
        name: *mut ::std::os::raw::c_char,
        init_fn: HPDF_Encoder_Init_Func,
    ) -> HPDF_Encoder;
}
extern "C" {
    pub fn HPDF_CMapEncoder_InitAttr(encoder: HPDF_Encoder) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_Free(encoder: HPDF_Encoder);
}
extern "C" {
    pub fn HPDF_CMapEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_ToUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UNICODE;
}
extern "C" {
    pub fn HPDF_CMapEncoder_ToCID(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UINT16;
}
extern "C" {
    pub fn HPDF_CMapEncoder_SetParseText(
        encoder: HPDF_Encoder,
        state: *mut HPDF_ParseText_Rec,
        text: *const HPDF_BYTE,
        len: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_ByteType(
        encoder: HPDF_Encoder,
        state: *mut HPDF_ParseText_Rec,
    ) -> HPDF_ByteType;
}
extern "C" {
    pub fn HPDF_CMapEncoder_AddCMap(
        encoder: HPDF_Encoder,
        range: *const HPDF_CidRange_Rec,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_AddNotDefRange(
        encoder: HPDF_Encoder,
        range: HPDF_CidRange_Rec,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_AddCodeSpaceRange(
        encoder: HPDF_Encoder,
        range: HPDF_CidRange_Rec,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CMapEncoder_SetUnicodeArray(
        encoder: HPDF_Encoder,
        array1: *const HPDF_UnicodeMap_Rec,
    );
}
extern "C" {
    pub fn HPDF_CMapEncoder_AddJWWLineHead(
        encoder: HPDF_Encoder,
        code: *const HPDF_UINT16,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Encoder_CheckJWWLineHead(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_UnicodeToGryphName(unicode: HPDF_UNICODE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_GryphNameToUnicode(gryph_name: *const ::std::os::raw::c_char) -> HPDF_UNICODE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Obj_Header {
    pub obj_id: HPDF_UINT32,
    pub gen_no: HPDF_UINT16,
    pub obj_class: HPDF_UINT16,
}
#[test]
fn bindgen_test_layout__HPDF_Obj_Header() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Obj_Header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Obj_Header>(),
        8usize,
        concat!("Size of: ", stringify!(_HPDF_Obj_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Obj_Header>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Obj_Header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Obj_Header),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gen_no) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Obj_Header),
            "::",
            stringify!(gen_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_class) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Obj_Header),
            "::",
            stringify!(obj_class)
        )
    );
}
pub type HPDF_Obj_Header = _HPDF_Obj_Header;
extern "C" {
    pub fn HPDF_Obj_WriteValue(
        obj: *mut ::std::os::raw::c_void,
        stream: HPDF_Stream,
        e: HPDF_Encrypt,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Obj_Write(
        obj: *mut ::std::os::raw::c_void,
        stream: HPDF_Stream,
        e: HPDF_Encrypt,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Obj_Free(mmgr: HPDF_MMgr, obj: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn HPDF_Obj_ForceFree(mmgr: HPDF_MMgr, obj: *mut ::std::os::raw::c_void);
}
pub type HPDF_Null = *mut _HPDF_Null_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Null_Rec {
    pub header: HPDF_Obj_Header,
}
#[test]
fn bindgen_test_layout__HPDF_Null_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Null_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Null_Rec>(),
        8usize,
        concat!("Size of: ", stringify!(_HPDF_Null_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Null_Rec>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Null_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Null_Rec),
            "::",
            stringify!(header)
        )
    );
}
pub type HPDF_Null_Rec = _HPDF_Null_Rec;
extern "C" {
    pub fn HPDF_Null_New(mmgr: HPDF_MMgr) -> HPDF_Null;
}
pub type HPDF_Boolean = *mut _HPDF_Boolean_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Boolean_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_BOOL,
}
#[test]
fn bindgen_test_layout__HPDF_Boolean_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Boolean_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Boolean_Rec>(),
        12usize,
        concat!("Size of: ", stringify!(_HPDF_Boolean_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Boolean_Rec>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Boolean_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Boolean_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Boolean_Rec),
            "::",
            stringify!(value)
        )
    );
}
pub type HPDF_Boolean_Rec = _HPDF_Boolean_Rec;
extern "C" {
    pub fn HPDF_Boolean_New(mmgr: HPDF_MMgr, value: HPDF_BOOL) -> HPDF_Boolean;
}
extern "C" {
    pub fn HPDF_Boolean_Write(obj: HPDF_Boolean, stream: HPDF_Stream) -> HPDF_STATUS;
}
pub type HPDF_Number = *mut _HPDF_Number_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Number_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_INT32,
}
#[test]
fn bindgen_test_layout__HPDF_Number_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Number_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Number_Rec>(),
        12usize,
        concat!("Size of: ", stringify!(_HPDF_Number_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Number_Rec>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_Number_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Number_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Number_Rec),
            "::",
            stringify!(value)
        )
    );
}
pub type HPDF_Number_Rec = _HPDF_Number_Rec;
extern "C" {
    pub fn HPDF_Number_New(mmgr: HPDF_MMgr, value: HPDF_INT32) -> HPDF_Number;
}
extern "C" {
    pub fn HPDF_Number_SetValue(obj: HPDF_Number, value: HPDF_INT32);
}
extern "C" {
    pub fn HPDF_Number_Write(obj: HPDF_Number, stream: HPDF_Stream) -> HPDF_STATUS;
}
pub type HPDF_Real = *mut _HPDF_Real_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Real_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: HPDF_REAL,
}
#[test]
fn bindgen_test_layout__HPDF_Real_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Real_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Real_Rec>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_Real_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Real_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Real_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Real_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Real_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Real_Rec),
            "::",
            stringify!(value)
        )
    );
}
pub type HPDF_Real_Rec = _HPDF_Real_Rec;
extern "C" {
    pub fn HPDF_Real_New(mmgr: HPDF_MMgr, value: HPDF_REAL) -> HPDF_Real;
}
extern "C" {
    pub fn HPDF_Real_Write(obj: HPDF_Real, stream: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Real_SetValue(obj: HPDF_Real, value: HPDF_REAL) -> HPDF_STATUS;
}
pub type HPDF_Name = *mut _HPDF_Name_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Name_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout__HPDF_Name_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Name_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Name_Rec>(),
        144usize,
        concat!("Size of: ", stringify!(_HPDF_Name_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Name_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Name_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Name_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Name_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Name_Rec),
            "::",
            stringify!(value)
        )
    );
}
pub type HPDF_Name_Rec = _HPDF_Name_Rec;
extern "C" {
    pub fn HPDF_Name_New(mmgr: HPDF_MMgr, value: *const ::std::os::raw::c_char) -> HPDF_Name;
}
extern "C" {
    pub fn HPDF_Name_SetValue(obj: HPDF_Name, value: *const ::std::os::raw::c_char) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Name_Write(obj: HPDF_Name, stream: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Name_GetValue(obj: HPDF_Name) -> *const ::std::os::raw::c_char;
}
pub type HPDF_String = *mut _HPDF_String_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_String_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub encoder: HPDF_Encoder,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_String_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_String_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_String_Rec>(),
        48usize,
        concat!("Size of: ", stringify!(_HPDF_String_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_String_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_String_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoder) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(encoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_String_Rec),
            "::",
            stringify!(len)
        )
    );
}
pub type HPDF_String_Rec = _HPDF_String_Rec;
extern "C" {
    pub fn HPDF_String_New(
        mmgr: HPDF_MMgr,
        value: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_String;
}
extern "C" {
    pub fn HPDF_String_SetValue(
        obj: HPDF_String,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_String_Free(obj: HPDF_String);
}
extern "C" {
    pub fn HPDF_String_Write(obj: HPDF_String, stream: HPDF_Stream, e: HPDF_Encrypt)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_String_Cmp(s1: HPDF_String, s2: HPDF_String) -> HPDF_INT32;
}
pub type HPDF_Binary = *mut _HPDF_Binary_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Binary_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_Binary_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Binary_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Binary_Rec>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_Binary_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Binary_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Binary_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Binary_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Binary_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Binary_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Binary_Rec),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Binary_Rec),
            "::",
            stringify!(len)
        )
    );
}
pub type HPDF_Binary_Rec = _HPDF_Binary_Rec;
extern "C" {
    pub fn HPDF_Binary_New(mmgr: HPDF_MMgr, value: *mut HPDF_BYTE, len: HPDF_UINT) -> HPDF_Binary;
}
extern "C" {
    pub fn HPDF_Binary_SetValue(
        obj: HPDF_Binary,
        value: *mut HPDF_BYTE,
        len: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Binary_GetValue(obj: HPDF_Binary) -> *mut HPDF_BYTE;
}
extern "C" {
    pub fn HPDF_Binary_Free(obj: HPDF_Binary);
}
extern "C" {
    pub fn HPDF_Binary_Write(obj: HPDF_Binary, stream: HPDF_Stream, e: HPDF_Encrypt)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Binary_GetLen(obj: HPDF_Binary) -> HPDF_UINT;
}
pub type HPDF_Array = *mut _HPDF_Array_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Array_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
}
#[test]
fn bindgen_test_layout__HPDF_Array_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Array_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Array_Rec>(),
        32usize,
        concat!("Size of: ", stringify!(_HPDF_Array_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Array_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Array_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Array_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Array_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Array_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Array_Rec),
            "::",
            stringify!(list)
        )
    );
}
pub type HPDF_Array_Rec = _HPDF_Array_Rec;
extern "C" {
    pub fn HPDF_Array_New(mmgr: HPDF_MMgr) -> HPDF_Array;
}
extern "C" {
    pub fn HPDF_Box_Array_New(mmgr: HPDF_MMgr, box_: HPDF_Box) -> HPDF_Array;
}
extern "C" {
    pub fn HPDF_Array_Free(array: HPDF_Array);
}
extern "C" {
    pub fn HPDF_Array_Write(array: HPDF_Array, stream: HPDF_Stream, e: HPDF_Encrypt)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_Add(array: HPDF_Array, obj: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_Insert(
        array: HPDF_Array,
        target: *mut ::std::os::raw::c_void,
        obj: *mut ::std::os::raw::c_void,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_GetItem(
        array: HPDF_Array,
        index: HPDF_UINT,
        obj_class: HPDF_UINT16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_Array_AddNumber(array: HPDF_Array, value: HPDF_INT32) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_AddReal(array: HPDF_Array, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_AddNull(array: HPDF_Array) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_AddName(
        array: HPDF_Array,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Array_Clear(array: HPDF_Array);
}
extern "C" {
    pub fn HPDF_Array_Items(array: HPDF_Array) -> HPDF_UINT;
}
pub type HPDF_Xref = *mut _HPDF_Xref_Rec;
pub type HPDF_Dict = *mut _HPDF_Dict_Rec;
pub type HPDF_Dict_FreeFunc = ::std::option::Option<unsafe extern "C" fn(obj: HPDF_Dict)>;
pub type HPDF_Dict_BeforeWriteFunc =
    ::std::option::Option<unsafe extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_AfterWriteFunc =
    ::std::option::Option<unsafe extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_OnWriteFunc =
    ::std::option::Option<unsafe extern "C" fn(obj: HPDF_Dict, stream: HPDF_Stream) -> HPDF_STATUS>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Dict_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
    pub before_write_fn: HPDF_Dict_BeforeWriteFunc,
    pub write_fn: HPDF_Dict_OnWriteFunc,
    pub after_write_fn: HPDF_Dict_AfterWriteFunc,
    pub free_fn: HPDF_Dict_FreeFunc,
    pub stream: HPDF_Stream,
    pub filter: HPDF_UINT,
    pub filterParams: HPDF_Dict,
    pub attr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_Dict_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Dict_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Dict_Rec>(),
        96usize,
        concat!("Size of: ", stringify!(_HPDF_Dict_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Dict_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Dict_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).before_write_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(before_write_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_fn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(write_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).after_write_fn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(after_write_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterParams) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(filterParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Dict_Rec),
            "::",
            stringify!(attr)
        )
    );
}
pub type HPDF_Dict_Rec = _HPDF_Dict_Rec;
pub type HPDF_DictElement = *mut _HPDF_DictElement_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_DictElement_Rec {
    pub key: [::std::os::raw::c_char; 128usize],
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_DictElement_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_DictElement_Rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_DictElement_Rec>(),
        136usize,
        concat!("Size of: ", stringify!(_HPDF_DictElement_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_DictElement_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_DictElement_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_DictElement_Rec),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_DictElement_Rec),
            "::",
            stringify!(value)
        )
    );
}
pub type HPDF_DictElement_Rec = _HPDF_DictElement_Rec;
extern "C" {
    pub fn HPDF_Dict_New(mmgr: HPDF_MMgr) -> HPDF_Dict;
}
extern "C" {
    pub fn HPDF_DictStream_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
}
extern "C" {
    pub fn HPDF_Dict_Free(dict: HPDF_Dict);
}
extern "C" {
    pub fn HPDF_Dict_Write(dict: HPDF_Dict, stream: HPDF_Stream, e: HPDF_Encrypt) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_GetKeyByObj(
        dict: HPDF_Dict,
        obj: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Dict_Add(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        obj: *mut ::std::os::raw::c_void,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_GetItem(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        obj_class: HPDF_UINT16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_Dict_AddName(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_AddNumber(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        value: HPDF_INT32,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_AddReal(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        value: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_AddBoolean(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
        value: HPDF_BOOL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Dict_RemoveElement(
        dict: HPDF_Dict,
        key: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
pub type HPDF_Proxy = *mut _HPDF_Proxy_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Proxy_Rec {
    pub header: HPDF_Obj_Header,
    pub obj: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_Proxy_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Proxy_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Proxy_Rec>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_Proxy_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Proxy_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Proxy_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Proxy_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Proxy_Rec),
            "::",
            stringify!(obj)
        )
    );
}
pub type HPDF_Proxy_Rec = _HPDF_Proxy_Rec;
extern "C" {
    pub fn HPDF_Proxy_New(mmgr: HPDF_MMgr, obj: *mut ::std::os::raw::c_void) -> HPDF_Proxy;
}
pub type HPDF_XrefEntry = *mut _HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_XrefEntry_Rec {
    pub entry_typ: ::std::os::raw::c_char,
    pub byte_offset: HPDF_UINT,
    pub gen_no: HPDF_UINT16,
    pub obj: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_XrefEntry_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_XrefEntry_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_XrefEntry_Rec>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_XrefEntry_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_XrefEntry_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_XrefEntry_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_typ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_XrefEntry_Rec),
            "::",
            stringify!(entry_typ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_XrefEntry_Rec),
            "::",
            stringify!(byte_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gen_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_XrefEntry_Rec),
            "::",
            stringify!(gen_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_XrefEntry_Rec),
            "::",
            stringify!(obj)
        )
    );
}
pub type HPDF_XrefEntry_Rec = _HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Xref_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub start_offset: HPDF_UINT32,
    pub entries: HPDF_List,
    pub addr: HPDF_UINT,
    pub prev: HPDF_Xref,
    pub trailer: HPDF_Dict,
}
#[test]
fn bindgen_test_layout__HPDF_Xref_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Xref_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Xref_Rec>(),
        56usize,
        concat!("Size of: ", stringify!(_HPDF_Xref_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Xref_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Xref_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(start_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Xref_Rec),
            "::",
            stringify!(trailer)
        )
    );
}
pub type HPDF_Xref_Rec = _HPDF_Xref_Rec;
extern "C" {
    pub fn HPDF_Xref_New(mmgr: HPDF_MMgr, offset: HPDF_UINT32) -> HPDF_Xref;
}
extern "C" {
    pub fn HPDF_Xref_Free(xref: HPDF_Xref);
}
extern "C" {
    pub fn HPDF_Xref_Add(xref: HPDF_Xref, obj: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Xref_GetEntry(xref: HPDF_Xref, index: HPDF_UINT) -> HPDF_XrefEntry;
}
extern "C" {
    pub fn HPDF_Xref_WriteToStream(
        xref: HPDF_Xref,
        stream: HPDF_Stream,
        e: HPDF_Encrypt,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Xref_GetEntryByObjectId(xref: HPDF_Xref, obj_id: HPDF_UINT) -> HPDF_XrefEntry;
}
pub type HPDF_EmbeddedFile = HPDF_Dict;
pub type HPDF_NameDict = HPDF_Dict;
pub type HPDF_NameTree = HPDF_Dict;
pub type HPDF_Pages = HPDF_Dict;
pub type HPDF_Page = HPDF_Dict;
pub type HPDF_Annotation = HPDF_Dict;
pub type HPDF_3DMeasure = HPDF_Dict;
pub type HPDF_ExData = HPDF_Dict;
pub type HPDF_XObject = HPDF_Dict;
pub type HPDF_Image = HPDF_Dict;
pub type HPDF_Outline = HPDF_Dict;
pub type HPDF_EncryptDict = HPDF_Dict;
pub type HPDF_Action = HPDF_Dict;
pub type HPDF_ExtGState = HPDF_Dict;
pub type HPDF_Destination = HPDF_Array;
pub type HPDF_U3D = HPDF_Dict;
pub type HPDF_OutputIntent = HPDF_Dict;
pub type HPDF_JavaScript = HPDF_Dict;
pub type HPDF_Shading = HPDF_Dict;
pub type HPDF_Direct = *mut _HPDF_Direct_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Direct_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_Direct_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Direct_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Direct_Rec>(),
        40usize,
        concat!("Size of: ", stringify!(_HPDF_Direct_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Direct_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Direct_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Direct_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Direct_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Direct_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Direct_Rec),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Direct_Rec),
            "::",
            stringify!(len)
        )
    );
}
pub type HPDF_Direct_Rec = _HPDF_Direct_Rec;
extern "C" {
    pub fn HPDF_Direct_New(mmgr: HPDF_MMgr, value: *mut HPDF_BYTE, len: HPDF_UINT) -> HPDF_Direct;
}
extern "C" {
    pub fn HPDF_Direct_SetValue(
        obj: HPDF_Direct,
        value: *mut HPDF_BYTE,
        len: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Direct_Free(obj: HPDF_Direct);
}
extern "C" {
    pub fn HPDF_Direct_Write(obj: HPDF_Direct, stream: HPDF_Stream) -> HPDF_STATUS;
}
pub type HPDF_Catalog = HPDF_Dict;
extern "C" {
    pub fn HPDF_Catalog_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Catalog;
}
extern "C" {
    pub fn HPDF_Catalog_GetNames(catalog: HPDF_Catalog) -> HPDF_NameDict;
}
extern "C" {
    pub fn HPDF_Catalog_SetNames(catalog: HPDF_Catalog, dict: HPDF_NameDict) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_GetRoot(catalog: HPDF_Catalog) -> HPDF_Pages;
}
extern "C" {
    pub fn HPDF_Catalog_GetPageLayout(catalog: HPDF_Catalog) -> HPDF_PageLayout;
}
extern "C" {
    pub fn HPDF_Catalog_SetPageLayout(
        catalog: HPDF_Catalog,
        layout: HPDF_PageLayout,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_GetPageMode(catalog: HPDF_Catalog) -> HPDF_PageMode;
}
extern "C" {
    pub fn HPDF_Catalog_SetPageMode(catalog: HPDF_Catalog, mode: HPDF_PageMode) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_SetOpenAction(
        catalog: HPDF_Catalog,
        open_action: HPDF_Destination,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_AddPageLabel(
        catalog: HPDF_Catalog,
        page_num: HPDF_UINT,
        page_label: HPDF_Dict,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_GetViewerPreference(catalog: HPDF_Catalog) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Catalog_SetViewerPreference(catalog: HPDF_Catalog, value: HPDF_UINT)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Catalog_Validate(catalog: HPDF_Catalog) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Image_Load1BitImageFromMem(
        mmgr: HPDF_MMgr,
        buf: *const HPDF_BYTE,
        xref: HPDF_Xref,
        width: HPDF_UINT,
        height: HPDF_UINT,
        line_width: HPDF_UINT,
        top_is_first: HPDF_BOOL,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadPngImage(
        mmgr: HPDF_MMgr,
        png_data: HPDF_Stream,
        xref: HPDF_Xref,
        delayed_loading: HPDF_BOOL,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadJpegImage(
        mmgr: HPDF_MMgr,
        jpeg_data: HPDF_Stream,
        xref: HPDF_Xref,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadJpegImageFromMem(
        mmgr: HPDF_MMgr,
        buf: *const HPDF_BYTE,
        size: HPDF_UINT,
        xref: HPDF_Xref,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadRawImage(
        mmgr: HPDF_MMgr,
        stream: HPDF_Stream,
        xref: HPDF_Xref,
        width: HPDF_UINT,
        height: HPDF_UINT,
        color_space: HPDF_ColorSpace,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadRawImageFromMem(
        mmgr: HPDF_MMgr,
        buf: *const HPDF_BYTE,
        xref: HPDF_Xref,
        width: HPDF_UINT,
        height: HPDF_UINT,
        color_space: HPDF_ColorSpace,
        bits_per_component: HPDF_UINT,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_Validate(image: HPDF_Image) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Image_SetMask(image: HPDF_Image, mask: HPDF_BOOL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Image_SetColorSpace(image: HPDF_Image, colorspace: HPDF_Array) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Image_SetRenderingIntent(
        image: HPDF_Image,
        intent: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CharData {
    pub char_cd: HPDF_INT16,
    pub unicode: HPDF_UNICODE,
    pub width: HPDF_INT16,
}
#[test]
fn bindgen_test_layout__HPDF_CharData() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CharData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CharData>(),
        6usize,
        concat!("Size of: ", stringify!(_HPDF_CharData))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CharData>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_CharData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_cd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CharData),
            "::",
            stringify!(char_cd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CharData),
            "::",
            stringify!(unicode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CharData),
            "::",
            stringify!(width)
        )
    );
}
pub type HPDF_CharData = _HPDF_CharData;
pub const _HPDF_FontDefType_HPDF_FONTDEF_TYPE_TYPE1: _HPDF_FontDefType = 0;
pub const _HPDF_FontDefType_HPDF_FONTDEF_TYPE_TRUETYPE: _HPDF_FontDefType = 1;
pub const _HPDF_FontDefType_HPDF_FONTDEF_TYPE_CID: _HPDF_FontDefType = 2;
pub const _HPDF_FontDefType_HPDF_FONTDEF_TYPE_UNINITIALIZED: _HPDF_FontDefType = 3;
pub const _HPDF_FontDefType_HPDF_FONTDEF_TYPE_EOF: _HPDF_FontDefType = 4;
pub type _HPDF_FontDefType = ::std::os::raw::c_uint;
pub use self::_HPDF_FontDefType as HPDF_FontDefType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CID_Width {
    pub cid: HPDF_UINT16,
    pub width: HPDF_INT16,
}
#[test]
fn bindgen_test_layout__HPDF_CID_Width() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CID_Width> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CID_Width>(),
        4usize,
        concat!("Size of: ", stringify!(_HPDF_CID_Width))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CID_Width>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_CID_Width))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CID_Width),
            "::",
            stringify!(cid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CID_Width),
            "::",
            stringify!(width)
        )
    );
}
pub type HPDF_CID_Width = _HPDF_CID_Width;
pub type HPDF_FontDef = *mut _HPDF_FontDef_Rec;
pub type HPDF_FontDef_FreeFunc = ::std::option::Option<unsafe extern "C" fn(fontdef: HPDF_FontDef)>;
pub type HPDF_FontDef_CleanFunc =
    ::std::option::Option<unsafe extern "C" fn(fontdef: HPDF_FontDef)>;
pub type HPDF_FontDef_InitFunc =
    ::std::option::Option<unsafe extern "C" fn(fontdef: HPDF_FontDef) -> HPDF_STATUS>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_FontDef_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub base_font: [::std::os::raw::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub type_: HPDF_FontDefType,
    pub clean_fn: HPDF_FontDef_CleanFunc,
    pub free_fn: HPDF_FontDef_FreeFunc,
    pub init_fn: HPDF_FontDef_InitFunc,
    pub ascent: HPDF_INT16,
    pub descent: HPDF_INT16,
    pub flags: HPDF_UINT,
    pub font_bbox: HPDF_Box,
    pub italic_angle: HPDF_INT16,
    pub stemv: HPDF_UINT16,
    pub avg_width: HPDF_INT16,
    pub max_width: HPDF_INT16,
    pub missing_width: HPDF_INT16,
    pub stemh: HPDF_UINT16,
    pub x_height: HPDF_UINT16,
    pub cap_height: HPDF_UINT16,
    pub descriptor: HPDF_Dict,
    pub data: HPDF_Stream,
    pub valid: HPDF_BOOL,
    pub attr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__HPDF_FontDef_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_FontDef_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_FontDef_Rec>(),
        256usize,
        concat!("Size of: ", stringify!(_HPDF_FontDef_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_FontDef_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_FontDef_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(sig_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_font) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(base_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clean_fn) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(clean_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_fn) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(free_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_fn) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(init_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ascent) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(ascent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descent) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(descent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_bbox) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(font_bbox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).italic_angle) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(italic_angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stemv) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(stemv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avg_width) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(avg_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_width) as usize - ptr as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missing_width) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(missing_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stemh) as usize - ptr as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(stemh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_height) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(x_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap_height) as usize - ptr as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(cap_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontDef_Rec),
            "::",
            stringify!(attr)
        )
    );
}
pub type HPDF_FontDef_Rec = _HPDF_FontDef_Rec;
extern "C" {
    pub fn HPDF_FontDef_Free(fontdef: HPDF_FontDef);
}
extern "C" {
    pub fn HPDF_FontDef_Cleanup(fontdef: HPDF_FontDef);
}
extern "C" {
    pub fn HPDF_FontDef_Validate(fontdef: HPDF_FontDef) -> HPDF_BOOL;
}
pub type HPDF_Type1FontDefAttr = *mut _HPDF_Type1FontDefAttrRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Type1FontDefAttrRec {
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub widths: *mut HPDF_CharData,
    pub widths_count: HPDF_UINT,
    pub leading: HPDF_INT16,
    pub char_set: *mut ::std::os::raw::c_char,
    pub encoding_scheme: [::std::os::raw::c_char; 128usize],
    pub length1: HPDF_UINT,
    pub length2: HPDF_UINT,
    pub length3: HPDF_UINT,
    pub is_base14font: HPDF_BOOL,
    pub is_fixed_pitch: HPDF_BOOL,
    pub font_data: HPDF_Stream,
}
#[test]
fn bindgen_test_layout__HPDF_Type1FontDefAttrRec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Type1FontDefAttrRec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Type1FontDefAttrRec>(),
        192usize,
        concat!("Size of: ", stringify!(_HPDF_Type1FontDefAttrRec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Type1FontDefAttrRec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Type1FontDefAttrRec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_char) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(first_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_char) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(last_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(widths_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leading) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(leading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_set) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(char_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding_scheme) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(encoding_scheme)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(length1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length2) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(length2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length3) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(length3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_base14font) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(is_base14font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_fixed_pitch) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(is_fixed_pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_data) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Type1FontDefAttrRec),
            "::",
            stringify!(font_data)
        )
    );
}
pub type HPDF_Type1FontDefAttr_Rec = _HPDF_Type1FontDefAttrRec;
extern "C" {
    pub fn HPDF_Type1FontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_Type1FontDef_Load(
        mmgr: HPDF_MMgr,
        afm: HPDF_Stream,
        font_data: HPDF_Stream,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_Type1FontDef_Duplicate(mmgr: HPDF_MMgr, src: HPDF_FontDef) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_Type1FontDef_SetWidths(
        fontdef: HPDF_FontDef,
        widths: *const HPDF_CharData,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Type1FontDef_GetWidthByName(
        fontdef: HPDF_FontDef,
        gryph_name: *const ::std::os::raw::c_char,
    ) -> HPDF_INT16;
}
extern "C" {
    pub fn HPDF_Type1FontDef_GetWidth(fontdef: HPDF_FontDef, unicode: HPDF_UNICODE) -> HPDF_INT16;
}
extern "C" {
    pub fn HPDF_Base14FontDef_New(
        mmgr: HPDF_MMgr,
        font_name: *const ::std::os::raw::c_char,
    ) -> HPDF_FontDef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_Table {
    pub tag: [::std::os::raw::c_char; 4usize],
    pub check_sum: HPDF_UINT32,
    pub offset: HPDF_UINT32,
    pub length: HPDF_UINT32,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_Table() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_Table> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_Table>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_Table))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_Table>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_Table))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_Table),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_sum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_Table),
            "::",
            stringify!(check_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_Table),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_Table),
            "::",
            stringify!(length)
        )
    );
}
pub type HPDF_TTFTable = _HPDF_TTF_Table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_OffsetTbl {
    pub sfnt_version: HPDF_UINT32,
    pub num_tables: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub table: *mut HPDF_TTFTable,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_OffsetTbl() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_OffsetTbl> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_OffsetTbl>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_OffsetTbl))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_OffsetTbl>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_OffsetTbl))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfnt_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(sfnt_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_tables) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(num_tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_range) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(search_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_selector) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(entry_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_shift) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(range_shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_OffsetTbl),
            "::",
            stringify!(table)
        )
    );
}
pub type HPDF_TTF_OffsetTbl = _HPDF_TTF_OffsetTbl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_CmapRange {
    pub format: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub language: HPDF_UINT16,
    pub seg_count_x2: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub end_count: *mut HPDF_UINT16,
    pub reserved_pad: HPDF_UINT16,
    pub start_count: *mut HPDF_UINT16,
    pub id_delta: *mut HPDF_INT16,
    pub id_range_offset: *mut HPDF_UINT16,
    pub glyph_id_array: *mut HPDF_UINT16,
    pub glyph_id_array_count: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_CmapRange() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_CmapRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_CmapRange>(),
        72usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_CmapRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_CmapRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_CmapRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seg_count_x2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(seg_count_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_range) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(search_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_selector) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(entry_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_shift) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(range_shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(end_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_pad) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(reserved_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(start_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_delta) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(id_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_range_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(id_range_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glyph_id_array) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(glyph_id_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glyph_id_array_count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_CmapRange),
            "::",
            stringify!(glyph_id_array_count)
        )
    );
}
pub type HPDF_TTF_CmapRange = _HPDF_TTF_CmapRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_GryphOffsets {
    pub base_offset: HPDF_UINT32,
    pub offsets: *mut HPDF_UINT32,
    pub flgs: *mut HPDF_BYTE,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_GryphOffsets() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_GryphOffsets> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_GryphOffsets>(),
        24usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_GryphOffsets))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_GryphOffsets>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_GryphOffsets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_GryphOffsets),
            "::",
            stringify!(base_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offsets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_GryphOffsets),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flgs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_GryphOffsets),
            "::",
            stringify!(flgs)
        )
    );
}
pub type HPDF_TTF_GryphOffsets = _HPDF_TTF_GryphOffsets;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_LongHorMetric {
    pub advance_width: HPDF_UINT16,
    pub lsb: HPDF_INT16,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_LongHorMetric() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_LongHorMetric> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_LongHorMetric>(),
        4usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_LongHorMetric))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_LongHorMetric>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_LongHorMetric))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advance_width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_LongHorMetric),
            "::",
            stringify!(advance_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lsb) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_LongHorMetric),
            "::",
            stringify!(lsb)
        )
    );
}
pub type HPDF_TTF_LongHorMetric = _HPDF_TTF_LongHorMetric;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_FontHeader {
    pub version_number: [HPDF_BYTE; 4usize],
    pub font_revision: HPDF_UINT32,
    pub check_sum_adjustment: HPDF_UINT32,
    pub magic_number: HPDF_UINT32,
    pub flags: HPDF_UINT16,
    pub units_per_em: HPDF_UINT16,
    pub created: [HPDF_BYTE; 8usize],
    pub modified: [HPDF_BYTE; 8usize],
    pub x_min: HPDF_INT16,
    pub y_min: HPDF_INT16,
    pub x_max: HPDF_INT16,
    pub y_max: HPDF_INT16,
    pub mac_style: HPDF_UINT16,
    pub lowest_rec_ppem: HPDF_UINT16,
    pub font_direction_hint: HPDF_INT16,
    pub index_to_loc_format: HPDF_INT16,
    pub glyph_data_format: HPDF_INT16,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_FontHeader() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_FontHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_FontHeader>(),
        56usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_FontHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_FontHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_FontHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(version_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_revision) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(font_revision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check_sum_adjustment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(check_sum_adjustment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic_number) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(magic_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).units_per_em) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(units_per_em)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).created) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_min) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(x_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_min) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(y_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_max) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(x_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_max) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(y_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac_style) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(mac_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowest_rec_ppem) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(lowest_rec_ppem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_direction_hint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(font_direction_hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index_to_loc_format) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(index_to_loc_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glyph_data_format) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_FontHeader),
            "::",
            stringify!(glyph_data_format)
        )
    );
}
pub type HPDF_TTF_FontHeader = _HPDF_TTF_FontHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_NameRecord {
    pub platform_id: HPDF_UINT16,
    pub encoding_id: HPDF_UINT16,
    pub language_id: HPDF_UINT16,
    pub name_id: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub offset: HPDF_UINT16,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_NameRecord() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_NameRecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_NameRecord>(),
        12usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_NameRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_NameRecord>(),
        2usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_NameRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platform_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(platform_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(encoding_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(language_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_id) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(name_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NameRecord),
            "::",
            stringify!(offset)
        )
    );
}
pub type HPDF_TTF_NameRecord = _HPDF_TTF_NameRecord;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTF_NamingTable {
    pub format: HPDF_UINT16,
    pub count: HPDF_UINT16,
    pub string_offset: HPDF_UINT16,
    pub name_records: *mut HPDF_TTF_NameRecord,
}
#[test]
fn bindgen_test_layout__HPDF_TTF_NamingTable() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTF_NamingTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTF_NamingTable>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_TTF_NamingTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTF_NamingTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_TTF_NamingTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NamingTable),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NamingTable),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NamingTable),
            "::",
            stringify!(string_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_records) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTF_NamingTable),
            "::",
            stringify!(name_records)
        )
    );
}
pub type HPDF_TTF_NamingTable = _HPDF_TTF_NamingTable;
pub type HPDF_TTFontDefAttr = *mut _HPDF_TTFontDefAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_TTFontDefAttr_Rec {
    pub base_font: [::std::os::raw::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub char_set: *mut ::std::os::raw::c_char,
    pub tag_name: [::std::os::raw::c_char; 7usize],
    pub tag_name2: [::std::os::raw::c_char; 14usize],
    pub header: HPDF_TTF_FontHeader,
    pub glyph_tbl: HPDF_TTF_GryphOffsets,
    pub num_glyphs: HPDF_UINT16,
    pub name_tbl: HPDF_TTF_NamingTable,
    pub h_metric: *mut HPDF_TTF_LongHorMetric,
    pub num_h_metric: HPDF_UINT16,
    pub offset_tbl: HPDF_TTF_OffsetTbl,
    pub cmap: HPDF_TTF_CmapRange,
    pub fs_type: HPDF_UINT16,
    pub sfamilyclass: [HPDF_BYTE; 2usize],
    pub panose: [HPDF_BYTE; 10usize],
    pub code_page_range1: HPDF_UINT32,
    pub code_page_range2: HPDF_UINT32,
    pub length1: HPDF_UINT,
    pub embedding: HPDF_BOOL,
    pub is_cidfont: HPDF_BOOL,
    pub stream: HPDF_Stream,
}
#[test]
fn bindgen_test_layout__HPDF_TTFontDefAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_TTFontDefAttr_Rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_TTFontDefAttr_Rec>(),
        432usize,
        concat!("Size of: ", stringify!(_HPDF_TTFontDefAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_TTFontDefAttr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_TTFontDefAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_font) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(base_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_char) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(first_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_char) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(last_char)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_set) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(char_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag_name) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(tag_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag_name2) as usize - ptr as usize },
        151usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(tag_name2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).glyph_tbl) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(glyph_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_glyphs) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(num_glyphs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_tbl) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(name_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_metric) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(h_metric)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_h_metric) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(num_h_metric)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_tbl) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(offset_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmap) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs_type) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(fs_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfamilyclass) as usize - ptr as usize },
        386usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(sfamilyclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panose) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(panose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_page_range1) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(code_page_range1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code_page_range2) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(code_page_range2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length1) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(length1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embedding) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(embedding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_cidfont) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(is_cidfont)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_TTFontDefAttr_Rec),
            "::",
            stringify!(stream)
        )
    );
}
pub type HPDF_TTFontDefAttr_Rec = _HPDF_TTFontDefAttr_Rec;
extern "C" {
    pub fn HPDF_TTFontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_TTFontDef_Load(
        mmgr: HPDF_MMgr,
        stream: HPDF_Stream,
        embedding: HPDF_BOOL,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_TTFontDef_Load2(
        mmgr: HPDF_MMgr,
        stream: HPDF_Stream,
        index: HPDF_UINT,
        embedding: HPDF_BOOL,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_TTFontDef_GetGlyphid(fontdef: HPDF_FontDef, unicode: HPDF_UINT16) -> HPDF_UINT16;
}
extern "C" {
    pub fn HPDF_TTFontDef_GetCharWidth(fontdef: HPDF_FontDef, unicode: HPDF_UINT16) -> HPDF_INT16;
}
extern "C" {
    pub fn HPDF_TTFontDef_GetGidWidth(fontdef: HPDF_FontDef, gid: HPDF_UINT16) -> HPDF_INT16;
}
extern "C" {
    pub fn HPDF_TTFontDef_SaveFontData(fontdef: HPDF_FontDef, stream: HPDF_Stream) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_TTFontDef_GetCharBBox(fontdef: HPDF_FontDef, unicode: HPDF_UINT16) -> HPDF_Box;
}
extern "C" {
    pub fn HPDF_TTFontDef_SetTagName(fontdef: HPDF_FontDef, tag: *mut ::std::os::raw::c_char);
}
pub type HPDF_CIDFontDefAttr = *mut _HPDF_CIDFontDefAttrRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_CIDFontDefAttrRec {
    pub widths: HPDF_List,
    pub DW: HPDF_INT16,
    pub DW2: [HPDF_INT16; 2usize],
}
#[test]
fn bindgen_test_layout__HPDF_CIDFontDefAttrRec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_CIDFontDefAttrRec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_CIDFontDefAttrRec>(),
        16usize,
        concat!("Size of: ", stringify!(_HPDF_CIDFontDefAttrRec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_CIDFontDefAttrRec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_CIDFontDefAttrRec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CIDFontDefAttrRec),
            "::",
            stringify!(widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DW) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CIDFontDefAttrRec),
            "::",
            stringify!(DW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DW2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_CIDFontDefAttrRec),
            "::",
            stringify!(DW2)
        )
    );
}
pub type HPDF_CIDFontDefAttr_Rec = _HPDF_CIDFontDefAttrRec;
extern "C" {
    pub fn HPDF_CIDFontDef_New(
        mmgr: HPDF_MMgr,
        name: *mut ::std::os::raw::c_char,
        init_fn: HPDF_FontDef_InitFunc,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_CIDFontDef_AddWidth(
        fontdef: HPDF_FontDef,
        widths: *const HPDF_CID_Width,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CIDFontDef_GetCIDWidth(fontdef: HPDF_FontDef, cid: HPDF_UINT16) -> HPDF_INT16;
}
extern "C" {
    pub fn HPDF_CIDFontDef_ChangeStyle(
        fontdef: HPDF_FontDef,
        bold: HPDF_BOOL,
        italic: HPDF_BOOL,
    ) -> HPDF_STATUS;
}
pub const _HPDF_FontType_HPDF_FONT_TYPE1: _HPDF_FontType = 0;
pub const _HPDF_FontType_HPDF_FONT_TRUETYPE: _HPDF_FontType = 1;
pub const _HPDF_FontType_HPDF_FONT_TYPE3: _HPDF_FontType = 2;
pub const _HPDF_FontType_HPDF_FONT_TYPE0_CID: _HPDF_FontType = 3;
pub const _HPDF_FontType_HPDF_FONT_TYPE0_TT: _HPDF_FontType = 4;
pub const _HPDF_FontType_HPDF_FONT_CID_TYPE0: _HPDF_FontType = 5;
pub const _HPDF_FontType_HPDF_FONT_CID_TYPE2: _HPDF_FontType = 6;
pub const _HPDF_FontType_HPDF_FONT_MMTYPE1: _HPDF_FontType = 7;
pub type _HPDF_FontType = ::std::os::raw::c_uint;
pub use self::_HPDF_FontType as HPDF_FontType;
pub type HPDF_Font = HPDF_Dict;
pub type HPDF_Font_TextWidths_Func = ::std::option::Option<
    unsafe extern "C" fn(font: HPDF_Font, text: *const HPDF_BYTE, len: HPDF_UINT) -> HPDF_TextWidth,
>;
pub type HPDF_Font_MeasureText_Func = ::std::option::Option<
    unsafe extern "C" fn(
        font: HPDF_Font,
        text: *const HPDF_BYTE,
        len: HPDF_UINT,
        width: HPDF_REAL,
        fontsize: HPDF_REAL,
        charspace: HPDF_REAL,
        wordspace: HPDF_REAL,
        wordwrap: HPDF_BOOL,
        real_width: *mut HPDF_REAL,
    ) -> HPDF_UINT,
>;
pub type HPDF_FontAttr = *mut _HPDF_FontAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_FontAttr_Rec {
    pub type_: HPDF_FontType,
    pub writing_mode: HPDF_WritingMode,
    pub text_width_fn: HPDF_Font_TextWidths_Func,
    pub measure_text_fn: HPDF_Font_MeasureText_Func,
    pub fontdef: HPDF_FontDef,
    pub encoder: HPDF_Encoder,
    pub widths: *mut HPDF_INT16,
    pub used: *mut HPDF_BYTE,
    pub xref: HPDF_Xref,
    pub descendant_font: HPDF_Font,
    pub map_stream: HPDF_Dict,
    pub cmap_stream: HPDF_Dict,
}
#[test]
fn bindgen_test_layout__HPDF_FontAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_FontAttr_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_FontAttr_Rec>(),
        88usize,
        concat!("Size of: ", stringify!(_HPDF_FontAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_FontAttr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_FontAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writing_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(writing_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_width_fn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(text_width_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).measure_text_fn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(measure_text_fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fontdef) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(fontdef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoder) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(encoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).widths) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(widths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descendant_font) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(descendant_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_stream) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(map_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmap_stream) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_FontAttr_Rec),
            "::",
            stringify!(cmap_stream)
        )
    );
}
pub type HPDF_FontAttr_Rec = _HPDF_FontAttr_Rec;
extern "C" {
    pub fn HPDF_Type1Font_New(
        mmgr: HPDF_MMgr,
        fontdef: HPDF_FontDef,
        encoder: HPDF_Encoder,
        xref: HPDF_Xref,
    ) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_TTFont_New(
        mmgr: HPDF_MMgr,
        fontdef: HPDF_FontDef,
        encoder: HPDF_Encoder,
        xref: HPDF_Xref,
    ) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_Type0Font_New(
        mmgr: HPDF_MMgr,
        fontdef: HPDF_FontDef,
        encoder: HPDF_Encoder,
        xref: HPDF_Xref,
    ) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_Font_Validate(font: HPDF_Font) -> HPDF_BOOL;
}
pub type HPDF_GState = *mut _HPDF_GState_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_GState_Rec {
    pub trans_matrix: HPDF_TransMatrix,
    pub line_width: HPDF_REAL,
    pub line_cap: HPDF_LineCap,
    pub line_join: HPDF_LineJoin,
    pub miter_limit: HPDF_REAL,
    pub dash_mode: HPDF_DashMode,
    pub flatness: HPDF_REAL,
    pub char_space: HPDF_REAL,
    pub word_space: HPDF_REAL,
    pub h_scalling: HPDF_REAL,
    pub text_leading: HPDF_REAL,
    pub rendering_mode: HPDF_TextRenderingMode,
    pub text_rise: HPDF_REAL,
    pub cs_fill: HPDF_ColorSpace,
    pub cs_stroke: HPDF_ColorSpace,
    pub rgb_fill: HPDF_RGBColor,
    pub rgb_stroke: HPDF_RGBColor,
    pub cmyk_fill: HPDF_CMYKColor,
    pub cmyk_stroke: HPDF_CMYKColor,
    pub gray_fill: HPDF_REAL,
    pub gray_stroke: HPDF_REAL,
    pub font: HPDF_Font,
    pub font_size: HPDF_REAL,
    pub writing_mode: HPDF_WritingMode,
    pub prev: HPDF_GState,
    pub depth: HPDF_UINT,
}
#[test]
fn bindgen_test_layout__HPDF_GState_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_GState_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_GState_Rec>(),
        216usize,
        concat!("Size of: ", stringify!(_HPDF_GState_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_GState_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_GState_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_matrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(trans_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(line_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_cap) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(line_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_join) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(line_join)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miter_limit) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(miter_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dash_mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(dash_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flatness) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(flatness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_space) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(char_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_space) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(word_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_scalling) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(h_scalling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_leading) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(text_leading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rendering_mode) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(rendering_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_rise) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(text_rise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_fill) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(cs_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_stroke) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(cs_stroke)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgb_fill) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(rgb_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rgb_stroke) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(rgb_stroke)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmyk_fill) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(cmyk_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmyk_stroke) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(cmyk_stroke)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gray_fill) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(gray_fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gray_stroke) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(gray_stroke)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_size) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(font_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writing_mode) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(writing_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_GState_Rec),
            "::",
            stringify!(depth)
        )
    );
}
pub type HPDF_GState_Rec = _HPDF_GState_Rec;
extern "C" {
    pub fn HPDF_GState_New(mmgr: HPDF_MMgr, current: HPDF_GState) -> HPDF_GState;
}
extern "C" {
    pub fn HPDF_GState_Free(mmgr: HPDF_MMgr, gstate: HPDF_GState) -> HPDF_GState;
}
extern "C" {
    pub fn HPDF_ExtGState_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
}
extern "C" {
    pub fn HPDF_ExtGState_Validate(ext_gstate: HPDF_ExtGState) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Pages_New(mmgr: HPDF_MMgr, parent: HPDF_Pages, xref: HPDF_Xref) -> HPDF_Pages;
}
extern "C" {
    pub fn HPDF_Pages_Validate(pages: HPDF_Pages) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Pages_AddKids(parent: HPDF_Pages, kid: HPDF_Dict) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_InsertBefore(page: HPDF_Page, target: HPDF_Page) -> HPDF_STATUS;
}
pub type HPDF_PageAttr = *mut _HPDF_PageAttr_Rec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_PageAttr_Rec {
    pub parent: HPDF_Pages,
    pub fonts: HPDF_Dict,
    pub xobjects: HPDF_Dict,
    pub ext_gstates: HPDF_Dict,
    pub shadings: HPDF_Dict,
    pub gstate: HPDF_GState,
    pub str_pos: HPDF_Point,
    pub cur_pos: HPDF_Point,
    pub text_pos: HPDF_Point,
    pub text_matrix: HPDF_TransMatrix,
    pub gmode: HPDF_UINT16,
    pub contents: HPDF_Dict,
    pub stream: HPDF_Stream,
    pub xref: HPDF_Xref,
    pub compression_mode: HPDF_UINT,
    pub ver: *mut HPDF_PDFVer,
}
#[test]
fn bindgen_test_layout__HPDF_PageAttr_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_PageAttr_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_PageAttr_Rec>(),
        144usize,
        concat!("Size of: ", stringify!(_HPDF_PageAttr_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_PageAttr_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_PageAttr_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fonts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(fonts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xobjects) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(xobjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ext_gstates) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(ext_gstates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(shadings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gstate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(gstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_pos) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(str_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(cur_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_pos) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(text_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_matrix) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(text_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(gmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(contents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression_mode) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(compression_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_PageAttr_Rec),
            "::",
            stringify!(ver)
        )
    );
}
pub type HPDF_PageAttr_Rec = _HPDF_PageAttr_Rec;
extern "C" {
    pub fn HPDF_Page_Validate(page: HPDF_Page) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Page_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Page;
}
extern "C" {
    pub fn HPDF_Page_GetInheritableItem(
        page: HPDF_Page,
        key: *const ::std::os::raw::c_char,
        obj_class: HPDF_UINT16,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn HPDF_Page_GetXObjectName(
        page: HPDF_Page,
        xobj: HPDF_XObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Page_GetLocalFontName(
        page: HPDF_Page,
        font: HPDF_Font,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Page_GetExtGStateName(
        page: HPDF_Page,
        gstate: HPDF_ExtGState,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Page_GetShadingName(
        page: HPDF_Page,
        shading: HPDF_Shading,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Page_GetMediaBox(page: HPDF_Page) -> HPDF_Box;
}
extern "C" {
    pub fn HPDF_Page_SetBoxValue(
        page: HPDF_Page,
        name: *const ::std::os::raw::c_char,
        index: HPDF_UINT,
        value: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetFilter(page: HPDF_Page, filter: HPDF_UINT);
}
extern "C" {
    pub fn HPDF_Page_CheckState(page: HPDF_Page, mode: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_OutlineRoot_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_New(
        mmgr: HPDF_MMgr,
        parent: HPDF_Outline,
        title: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
        xref: HPDF_Xref,
    ) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetFirst(outline: HPDF_Outline) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetLast(outline: HPDF_Outline) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetPrev(outline: HPDF_Outline) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetNext(outline: HPDF_Outline) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetParent(outline: HPDF_Outline) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_GetOpened(outline: HPDF_Outline) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Outline_Validate(obj: HPDF_Outline) -> HPDF_BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HPDF_Doc_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub pdf_version: HPDF_PDFVer,
    pub mmgr: HPDF_MMgr,
    pub catalog: HPDF_Catalog,
    pub outlines: HPDF_Outline,
    pub xref: HPDF_Xref,
    pub root_pages: HPDF_Pages,
    pub cur_pages: HPDF_Pages,
    pub cur_page: HPDF_Page,
    pub page_list: HPDF_List,
    pub error: HPDF_Error_Rec,
    pub info: HPDF_Dict,
    pub trailer: HPDF_Dict,
    pub font_mgr: HPDF_List,
    pub ttfont_tag: [HPDF_BYTE; 6usize],
    pub fontdef_list: HPDF_List,
    pub encoder_list: HPDF_List,
    pub cur_encoder: HPDF_Encoder,
    pub compression_mode: HPDF_BOOL,
    pub encrypt_on: HPDF_BOOL,
    pub encrypt_dict: HPDF_EncryptDict,
    pub def_encoder: HPDF_Encoder,
    pub page_per_pages: HPDF_UINT,
    pub cur_page_num: HPDF_UINT,
    pub stream: HPDF_Stream,
}
#[test]
fn bindgen_test_layout__HPDF_Doc_Rec() {
    const UNINIT: ::std::mem::MaybeUninit<_HPDF_Doc_Rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HPDF_Doc_Rec>(),
        200usize,
        concat!("Size of: ", stringify!(_HPDF_Doc_Rec))
    );
    assert_eq!(
        ::std::mem::align_of::<_HPDF_Doc_Rec>(),
        8usize,
        concat!("Alignment of ", stringify!(_HPDF_Doc_Rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(sig_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(pdf_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmgr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(mmgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catalog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(catalog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outlines) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(outlines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(xref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_pages) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(root_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_pages) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(cur_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_page) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(cur_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_list) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(page_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(trailer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_mgr) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(font_mgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttfont_tag) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(ttfont_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fontdef_list) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(fontdef_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoder_list) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(encoder_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_encoder) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(cur_encoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compression_mode) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(compression_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encrypt_on) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(encrypt_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encrypt_dict) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(encrypt_dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_encoder) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(def_encoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_per_pages) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(page_per_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_page_num) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(cur_page_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_HPDF_Doc_Rec),
            "::",
            stringify!(stream)
        )
    );
}
pub type HPDF_Doc_Rec = _HPDF_Doc_Rec;
pub type HPDF_Doc = *mut _HPDF_Doc_Rec;
extern "C" {
    pub fn HPDF_Doc_FindEncoder(
        pdf: HPDF_Doc,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_Encoder;
}
extern "C" {
    pub fn HPDF_Doc_FindFontDef(
        pdf: HPDF_Doc,
        font_name: *const ::std::os::raw::c_char,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_Doc_FindFont(
        pdf: HPDF_Doc,
        font_name: *const ::std::os::raw::c_char,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_Doc_Validate(pdf: HPDF_Doc) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_Doc_GetCurrentPages(pdf: HPDF_Doc) -> HPDF_Pages;
}
extern "C" {
    pub fn HPDF_Doc_AddPagesTo(pdf: HPDF_Doc, parent: HPDF_Pages) -> HPDF_Pages;
}
extern "C" {
    pub fn HPDF_Doc_SetCurrentPages(pdf: HPDF_Doc, pages: HPDF_Pages) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Doc_SetCurrentPage(pdf: HPDF_Doc, page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetFontDef(pdf: HPDF_Doc, font_name: *const ::std::os::raw::c_char)
        -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_Doc_RegisterFontDef(pdf: HPDF_Doc, fontdef: HPDF_FontDef) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Doc_RegisterEncoder(pdf: HPDF_Doc, encoder: HPDF_Encoder) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Doc_SetEncryptOn(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Doc_SetEncryptOff(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Doc_PrepareEncryption(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_PDFA_AppendOutputIntents(
        pdf: HPDF_Doc,
        iccname: *const ::std::os::raw::c_char,
        iccdict: HPDF_Dict,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_PDFA_SetPDFAConformance(pdf: HPDF_Doc, pdfatype: HPDF_PDFAType) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_PDFA_GenerateID(arg1: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_NewEx(
        user_error_fn: HPDF_Error_Handler,
        user_alloc_fn: HPDF_Alloc_Func,
        user_free_fn: HPDF_Free_Func,
        mem_pool_buf_size: HPDF_UINT,
        user_data: *mut ::std::os::raw::c_void,
    ) -> HPDF_Doc;
}
extern "C" {
    pub fn HPDF_New(
        user_error_fn: HPDF_Error_Handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> HPDF_Doc;
}
extern "C" {
    pub fn HPDF_SetErrorHandler(pdf: HPDF_Doc, user_error_fn: HPDF_Error_Handler) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Free(pdf: HPDF_Doc);
}
extern "C" {
    pub fn HPDF_GetDocMMgr(doc: HPDF_Doc) -> HPDF_MMgr;
}
extern "C" {
    pub fn HPDF_NewDoc(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FreeDoc(pdf: HPDF_Doc);
}
extern "C" {
    pub fn HPDF_HasDoc(pdf: HPDF_Doc) -> HPDF_BOOL;
}
extern "C" {
    pub fn HPDF_FreeDocAll(pdf: HPDF_Doc);
}
extern "C" {
    pub fn HPDF_SaveToStream(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetContents(
        pdf: HPDF_Doc,
        buf: *mut HPDF_BYTE,
        size: *mut HPDF_UINT32,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetStreamSize(pdf: HPDF_Doc) -> HPDF_UINT32;
}
extern "C" {
    pub fn HPDF_ReadFromStream(
        pdf: HPDF_Doc,
        buf: *mut HPDF_BYTE,
        size: *mut HPDF_UINT32,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ResetStream(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SaveToFile(pdf: HPDF_Doc, file_name: *const ::std::os::raw::c_char) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetError(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetErrorDetail(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ResetError(pdf: HPDF_Doc);
}
extern "C" {
    pub fn HPDF_CheckError(error: HPDF_Error) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetPagesConfiguration(pdf: HPDF_Doc, page_per_pages: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetPageByIndex(pdf: HPDF_Doc, index: HPDF_UINT) -> HPDF_Page;
}
extern "C" {
    pub fn HPDF_GetPageMMgr(page: HPDF_Page) -> HPDF_MMgr;
}
extern "C" {
    pub fn HPDF_GetPageLayout(pdf: HPDF_Doc) -> HPDF_PageLayout;
}
extern "C" {
    pub fn HPDF_SetPageLayout(pdf: HPDF_Doc, layout: HPDF_PageLayout) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetPageMode(pdf: HPDF_Doc) -> HPDF_PageMode;
}
extern "C" {
    pub fn HPDF_SetPageMode(pdf: HPDF_Doc, mode: HPDF_PageMode) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetViewerPreference(pdf: HPDF_Doc) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_SetViewerPreference(pdf: HPDF_Doc, value: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetOpenAction(pdf: HPDF_Doc, open_action: HPDF_Destination) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetCurrentPage(pdf: HPDF_Doc) -> HPDF_Page;
}
extern "C" {
    pub fn HPDF_AddPage(pdf: HPDF_Doc) -> HPDF_Page;
}
extern "C" {
    pub fn HPDF_InsertPage(pdf: HPDF_Doc, page: HPDF_Page) -> HPDF_Page;
}
extern "C" {
    pub fn HPDF_Page_SetWidth(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetHeight(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetBoundary(
        page: HPDF_Page,
        boundary: HPDF_PageBoundary,
        left: HPDF_REAL,
        bottom: HPDF_REAL,
        right: HPDF_REAL,
        top: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetSize(
        page: HPDF_Page,
        size: HPDF_PageSizes,
        direction: HPDF_PageDirection,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetRotate(page: HPDF_Page, angle: HPDF_UINT16) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetZoom(page: HPDF_Page, zoom: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetFont(
        pdf: HPDF_Doc,
        font_name: *const ::std::os::raw::c_char,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_LoadType1FontFromFile(
        pdf: HPDF_Doc,
        afm_file_name: *const ::std::os::raw::c_char,
        data_file_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_GetTTFontDefFromFile(
        pdf: HPDF_Doc,
        file_name: *const ::std::os::raw::c_char,
        embedding: HPDF_BOOL,
    ) -> HPDF_FontDef;
}
extern "C" {
    pub fn HPDF_LoadTTFontFromFile(
        pdf: HPDF_Doc,
        file_name: *const ::std::os::raw::c_char,
        embedding: HPDF_BOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_LoadTTFontFromFile2(
        pdf: HPDF_Doc,
        file_name: *const ::std::os::raw::c_char,
        index: HPDF_UINT,
        embedding: HPDF_BOOL,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_AddPageLabel(
        pdf: HPDF_Doc,
        page_num: HPDF_UINT,
        style: HPDF_PageNumStyle,
        first_page: HPDF_UINT,
        prefix: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseJPFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseKRFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseCNSFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseCNTFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_CreateOutline(
        pdf: HPDF_Doc,
        parent: HPDF_Outline,
        title: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Outline;
}
extern "C" {
    pub fn HPDF_Outline_SetOpened(outline: HPDF_Outline, opened: HPDF_BOOL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Outline_SetDestination(outline: HPDF_Outline, dst: HPDF_Destination)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_CreateDestination(page: HPDF_Page) -> HPDF_Destination;
}
extern "C" {
    pub fn HPDF_Destination_SetXYZ(
        dst: HPDF_Destination,
        left: HPDF_REAL,
        top: HPDF_REAL,
        zoom: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFit(dst: HPDF_Destination) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitH(dst: HPDF_Destination, top: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitV(dst: HPDF_Destination, left: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitR(
        dst: HPDF_Destination,
        left: HPDF_REAL,
        bottom: HPDF_REAL,
        right: HPDF_REAL,
        top: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitB(dst: HPDF_Destination) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitBH(dst: HPDF_Destination, top: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Destination_SetFitBV(dst: HPDF_Destination, left: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetEncoder(
        pdf: HPDF_Doc,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_Encoder;
}
extern "C" {
    pub fn HPDF_GetCurrentEncoder(pdf: HPDF_Doc) -> HPDF_Encoder;
}
extern "C" {
    pub fn HPDF_SetCurrentEncoder(
        pdf: HPDF_Doc,
        encoding_name: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Encoder_GetType(encoder: HPDF_Encoder) -> HPDF_EncoderType;
}
extern "C" {
    pub fn HPDF_Encoder_GetByteType(
        encoder: HPDF_Encoder,
        text: *const ::std::os::raw::c_char,
        index: HPDF_UINT,
    ) -> HPDF_ByteType;
}
extern "C" {
    pub fn HPDF_Encoder_GetUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16) -> HPDF_UNICODE;
}
extern "C" {
    pub fn HPDF_Encoder_GetWritingMode(encoder: HPDF_Encoder) -> HPDF_WritingMode;
}
extern "C" {
    pub fn HPDF_UseJPEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseKREncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseCNSEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseCNTEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_UseUTFEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_CreateXObjectFromImage(
        pdf: HPDF_Doc,
        page: HPDF_Page,
        rect: HPDF_Rect,
        image: HPDF_Image,
        zoom: HPDF_BOOL,
    ) -> HPDF_XObject;
}
extern "C" {
    pub fn HPDF_Page_CreateXObjectAsWhiteRect(
        pdf: HPDF_Doc,
        page: HPDF_Page,
        rect: HPDF_Rect,
    ) -> HPDF_XObject;
}
extern "C" {
    pub fn HPDF_Page_Create3DAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        tb: HPDF_BOOL,
        np: HPDF_BOOL,
        u3d: HPDF_U3D,
        ap: HPDF_Image,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateTextAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateFreeTextAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateLineAnnot(
        page: HPDF_Page,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint(
        pdf: HPDF_Doc,
        page: HPDF_Page,
        rect: HPDF_Rect,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateWidgetAnnot(page: HPDF_Page, rect: HPDF_Rect) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateLinkAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        dst: HPDF_Destination,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateURILinkAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        uri: *const ::std::os::raw::c_char,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateTextMarkupAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
        subType: HPDF_AnnotType,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateHighlightAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateUnderlineAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateSquigglyAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateStrikeOutAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreatePopupAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        parent: HPDF_Annotation,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateStampAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        name: HPDF_StampAnnotName,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateProjectionAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateSquareAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_Page_CreateCircleAnnot(
        page: HPDF_Page,
        rect: HPDF_Rect,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_Annotation;
}
extern "C" {
    pub fn HPDF_LinkAnnot_SetHighlightMode(
        annot: HPDF_Annotation,
        mode: HPDF_AnnotHighlightMode,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LinkAnnot_SetJavaScript(
        annot: HPDF_Annotation,
        javascript: HPDF_JavaScript,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LinkAnnot_SetBorderStyle(
        annot: HPDF_Annotation,
        width: HPDF_REAL,
        dash_on: HPDF_UINT16,
        dash_off: HPDF_UINT16,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_TextAnnot_SetIcon(annot: HPDF_Annotation, icon: HPDF_AnnotIcon) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_TextAnnot_SetOpened(annot: HPDF_Annotation, opened: HPDF_BOOL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annot_SetRGBColor(annot: HPDF_Annotation, color: HPDF_RGBColor) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annot_SetCMYKColor(annot: HPDF_Annotation, color: HPDF_CMYKColor) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annot_SetGrayColor(annot: HPDF_Annotation, color: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annot_SetNoColor(annot: HPDF_Annotation) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetTitle(
        annot: HPDF_Annotation,
        name: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetSubject(
        annot: HPDF_Annotation,
        name: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetCreationDate(
        annot: HPDF_Annotation,
        value: HPDF_Date,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetTransparency(
        annot: HPDF_Annotation,
        value: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetIntent(
        annot: HPDF_Annotation,
        intent: HPDF_AnnotIntent,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetPopup(annot: HPDF_Annotation, popup: HPDF_Annotation)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetRectDiff(annot: HPDF_Annotation, rect: HPDF_Rect) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetCloudEffect(
        annot: HPDF_Annotation,
        cloudIntensity: HPDF_INT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetInteriorRGBColor(
        annot: HPDF_Annotation,
        color: HPDF_RGBColor,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetInteriorCMYKColor(
        annot: HPDF_Annotation,
        color: HPDF_CMYKColor,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetInteriorGrayColor(
        annot: HPDF_Annotation,
        color: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_MarkupAnnot_SetInteriorTransparent(annot: HPDF_Annotation) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_TextMarkupAnnot_SetQuadPoints(
        annot: HPDF_Annotation,
        lb: HPDF_Point,
        rb: HPDF_Point,
        rt: HPDF_Point,
        lt: HPDF_Point,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annot_Set3DView(
        mmgr: HPDF_MMgr,
        annot: HPDF_Annotation,
        annot3d: HPDF_Annotation,
        view: HPDF_Dict,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_PopupAnnot_SetOpened(annot: HPDF_Annotation, opened: HPDF_BOOL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FreeTextAnnot_SetLineEndingStyle(
        annot: HPDF_Annotation,
        startStyle: HPDF_LineAnnotEndingStyle,
        endStyle: HPDF_LineAnnotEndingStyle,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FreeTextAnnot_Set3PointCalloutLine(
        annot: HPDF_Annotation,
        startPoint: HPDF_Point,
        kneePoint: HPDF_Point,
        endPoint: HPDF_Point,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FreeTextAnnot_Set2PointCalloutLine(
        annot: HPDF_Annotation,
        startPoint: HPDF_Point,
        endPoint: HPDF_Point,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_FreeTextAnnot_SetDefaultStyle(
        annot: HPDF_Annotation,
        style: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LineAnnot_SetPosition(
        annot: HPDF_Annotation,
        startPoint: HPDF_Point,
        startStyle: HPDF_LineAnnotEndingStyle,
        endPoint: HPDF_Point,
        endStyle: HPDF_LineAnnotEndingStyle,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LineAnnot_SetLeader(
        annot: HPDF_Annotation,
        leaderLen: HPDF_INT,
        leaderExtLen: HPDF_INT,
        leaderOffsetLen: HPDF_INT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LineAnnot_SetCaption(
        annot: HPDF_Annotation,
        showCaption: HPDF_BOOL,
        position: HPDF_LineAnnotCapPosition,
        horzOffset: HPDF_INT,
        vertOffset: HPDF_INT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Annotation_SetBorderStyle(
        annot: HPDF_Annotation,
        subtype: HPDF_BSSubtype,
        width: HPDF_REAL,
        dash_on: HPDF_UINT16,
        dash_off: HPDF_UINT16,
        dash_phase: HPDF_UINT16,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ProjectionAnnot_SetExData(
        annot: HPDF_Annotation,
        exdata: HPDF_ExData,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Create3DC3DMeasure(
        page: HPDF_Page,
        firstanchorpoint: HPDF_Point3D,
        textanchorpoint: HPDF_Point3D,
    ) -> HPDF_3DMeasure;
}
extern "C" {
    pub fn HPDF_Page_CreatePD33DMeasure(
        page: HPDF_Page,
        annotationPlaneNormal: HPDF_Point3D,
        firstAnchorPoint: HPDF_Point3D,
        secondAnchorPoint: HPDF_Point3D,
        leaderLinesDirection: HPDF_Point3D,
        measurementValuePoint: HPDF_Point3D,
        textYDirection: HPDF_Point3D,
        value: HPDF_REAL,
        unitsString: *const ::std::os::raw::c_char,
    ) -> HPDF_3DMeasure;
}
extern "C" {
    pub fn HPDF_3DMeasure_SetName(
        measure: HPDF_3DMeasure,
        name: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_3DMeasure_SetColor(measure: HPDF_3DMeasure, color: HPDF_RGBColor) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_3DMeasure_SetTextSize(measure: HPDF_3DMeasure, textsize: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_3DC3DMeasure_SetTextBoxSize(
        measure: HPDF_3DMeasure,
        x: HPDF_INT32,
        y: HPDF_INT32,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_3DC3DMeasure_SetText(
        measure: HPDF_3DMeasure,
        text: *const ::std::os::raw::c_char,
        encoder: HPDF_Encoder,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_3DC3DMeasure_SetProjectionAnotation(
        measure: HPDF_3DMeasure,
        projectionanotation: HPDF_Annotation,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Create3DAnnotExData(page: HPDF_Page) -> HPDF_ExData;
}
extern "C" {
    pub fn HPDF_3DAnnotExData_Set3DMeasurement(
        exdata: HPDF_ExData,
        measure: HPDF_3DMeasure,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Create3DView(
        page: HPDF_Page,
        u3d: HPDF_U3D,
        annot3d: HPDF_Annotation,
        name: *const ::std::os::raw::c_char,
    ) -> HPDF_Dict;
}
extern "C" {
    pub fn HPDF_3DView_Add3DC3DMeasure(view: HPDF_Dict, measure: HPDF_3DMeasure) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_LoadPngImageFromMem(
        pdf: HPDF_Doc,
        buffer: *const HPDF_BYTE,
        size: HPDF_UINT,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadPngImageFromFile(
        pdf: HPDF_Doc,
        filename: *const ::std::os::raw::c_char,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadPngImageFromFile2(
        pdf: HPDF_Doc,
        filename: *const ::std::os::raw::c_char,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadJpegImageFromFile(
        pdf: HPDF_Doc,
        filename: *const ::std::os::raw::c_char,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadJpegImageFromMem(
        pdf: HPDF_Doc,
        buffer: *const HPDF_BYTE,
        size: HPDF_UINT,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadU3DFromFile(
        pdf: HPDF_Doc,
        filename: *const ::std::os::raw::c_char,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadU3DFromMem(
        pdf: HPDF_Doc,
        buffer: *const HPDF_BYTE,
        size: HPDF_UINT,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_LoadRaw1BitImageFromMem(
        pdf: HPDF_Doc,
        buf: *const HPDF_BYTE,
        width: HPDF_UINT,
        height: HPDF_UINT,
        line_width: HPDF_UINT,
        black_is1: HPDF_BOOL,
        top_is_first: HPDF_BOOL,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadRawImageFromFile(
        pdf: HPDF_Doc,
        filename: *const ::std::os::raw::c_char,
        width: HPDF_UINT,
        height: HPDF_UINT,
        color_space: HPDF_ColorSpace,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_LoadRawImageFromMem(
        pdf: HPDF_Doc,
        buf: *const HPDF_BYTE,
        width: HPDF_UINT,
        height: HPDF_UINT,
        color_space: HPDF_ColorSpace,
        bits_per_component: HPDF_UINT,
    ) -> HPDF_Image;
}
extern "C" {
    pub fn HPDF_Image_AddSMask(image: HPDF_Image, smask: HPDF_Image) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Image_GetSize(image: HPDF_Image) -> HPDF_Point;
}
extern "C" {
    pub fn HPDF_Image_GetSize2(image: HPDF_Image, size: *mut HPDF_Point) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Image_GetWidth(image: HPDF_Image) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Image_GetHeight(image: HPDF_Image) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Image_GetBitsPerComponent(image: HPDF_Image) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Image_GetColorSpace(image: HPDF_Image) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Image_SetColorMask(
        image: HPDF_Image,
        rmin: HPDF_UINT,
        rmax: HPDF_UINT,
        gmin: HPDF_UINT,
        gmax: HPDF_UINT,
        bmin: HPDF_UINT,
        bmax: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Image_SetMaskImage(image: HPDF_Image, mask_image: HPDF_Image) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetInfoAttr(
        pdf: HPDF_Doc,
        type_: HPDF_InfoType,
        value: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_GetInfoAttr(pdf: HPDF_Doc, type_: HPDF_InfoType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_SetInfoDateAttr(
        pdf: HPDF_Doc,
        type_: HPDF_InfoType,
        value: HPDF_Date,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetPassword(
        pdf: HPDF_Doc,
        owner_passwd: *const ::std::os::raw::c_char,
        user_passwd: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetPermission(pdf: HPDF_Doc, permission: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetEncryptionMode(
        pdf: HPDF_Doc,
        mode: HPDF_EncryptMode,
        key_len: HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_SetCompressionMode(pdf: HPDF_Doc, mode: HPDF_UINT) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Font_GetFontName(font: HPDF_Font) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Font_GetEncodingName(font: HPDF_Font) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn HPDF_Font_GetUnicodeWidth(font: HPDF_Font, code: HPDF_UNICODE) -> HPDF_INT;
}
extern "C" {
    pub fn HPDF_Font_GetBBox(font: HPDF_Font) -> HPDF_Box;
}
extern "C" {
    pub fn HPDF_Font_GetAscent(font: HPDF_Font) -> HPDF_INT;
}
extern "C" {
    pub fn HPDF_Font_GetDescent(font: HPDF_Font) -> HPDF_INT;
}
extern "C" {
    pub fn HPDF_Font_GetXHeight(font: HPDF_Font) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Font_GetCapHeight(font: HPDF_Font) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Font_TextWidth(
        font: HPDF_Font,
        text: *const HPDF_BYTE,
        len: HPDF_UINT,
    ) -> HPDF_TextWidth;
}
extern "C" {
    pub fn HPDF_Font_MeasureText(
        font: HPDF_Font,
        text: *const HPDF_BYTE,
        len: HPDF_UINT,
        width: HPDF_REAL,
        font_size: HPDF_REAL,
        char_space: HPDF_REAL,
        word_space: HPDF_REAL,
        wordwrap: HPDF_BOOL,
        real_width: *mut HPDF_REAL,
    ) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_AttachFile(pdf: HPDF_Doc, file: *const ::std::os::raw::c_char)
        -> HPDF_EmbeddedFile;
}
extern "C" {
    pub fn HPDF_CreateExtGState(pdf: HPDF_Doc) -> HPDF_ExtGState;
}
extern "C" {
    pub fn HPDF_ExtGState_SetAlphaStroke(
        ext_gstate: HPDF_ExtGState,
        value: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ExtGState_SetAlphaFill(ext_gstate: HPDF_ExtGState, value: HPDF_REAL)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ExtGState_SetBlendMode(
        ext_gstate: HPDF_ExtGState,
        mode: HPDF_BlendMode,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_TextWidth(page: HPDF_Page, text: *const ::std::os::raw::c_char) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_MeasureText(
        page: HPDF_Page,
        text: *const ::std::os::raw::c_char,
        width: HPDF_REAL,
        wordwrap: HPDF_BOOL,
        real_width: *mut HPDF_REAL,
    ) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Page_GetWidth(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetHeight(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetGMode(page: HPDF_Page) -> HPDF_UINT16;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentPos(page: HPDF_Page) -> HPDF_Point;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentPos2(page: HPDF_Page, pos: *mut HPDF_Point) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentTextPos(page: HPDF_Page) -> HPDF_Point;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentTextPos2(page: HPDF_Page, pos: *mut HPDF_Point) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentFont(page: HPDF_Page) -> HPDF_Font;
}
extern "C" {
    pub fn HPDF_Page_GetCurrentFontSize(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetTransMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
}
extern "C" {
    pub fn HPDF_Page_GetLineWidth(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetLineCap(page: HPDF_Page) -> HPDF_LineCap;
}
extern "C" {
    pub fn HPDF_Page_GetLineJoin(page: HPDF_Page) -> HPDF_LineJoin;
}
extern "C" {
    pub fn HPDF_Page_GetMiterLimit(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetDash(page: HPDF_Page) -> HPDF_DashMode;
}
extern "C" {
    pub fn HPDF_Page_GetFlat(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetCharSpace(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetWordSpace(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetHorizontalScalling(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetTextLeading(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetTextRenderingMode(page: HPDF_Page) -> HPDF_TextRenderingMode;
}
extern "C" {
    pub fn HPDF_Page_GetTextRaise(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetTextRise(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetRGBFill(page: HPDF_Page) -> HPDF_RGBColor;
}
extern "C" {
    pub fn HPDF_Page_GetRGBStroke(page: HPDF_Page) -> HPDF_RGBColor;
}
extern "C" {
    pub fn HPDF_Page_GetCMYKFill(page: HPDF_Page) -> HPDF_CMYKColor;
}
extern "C" {
    pub fn HPDF_Page_GetCMYKStroke(page: HPDF_Page) -> HPDF_CMYKColor;
}
extern "C" {
    pub fn HPDF_Page_GetGrayFill(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetGrayStroke(page: HPDF_Page) -> HPDF_REAL;
}
extern "C" {
    pub fn HPDF_Page_GetStrokingColorSpace(page: HPDF_Page) -> HPDF_ColorSpace;
}
extern "C" {
    pub fn HPDF_Page_GetFillingColorSpace(page: HPDF_Page) -> HPDF_ColorSpace;
}
extern "C" {
    pub fn HPDF_Page_GetTextMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
}
extern "C" {
    pub fn HPDF_Page_GetGStateDepth(page: HPDF_Page) -> HPDF_UINT;
}
extern "C" {
    pub fn HPDF_Page_SetLineWidth(page: HPDF_Page, line_width: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetLineCap(page: HPDF_Page, line_cap: HPDF_LineCap) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetLineJoin(page: HPDF_Page, line_join: HPDF_LineJoin) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetMiterLimit(page: HPDF_Page, miter_limit: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetDash(
        page: HPDF_Page,
        dash_ptn: *const HPDF_REAL,
        num_param: HPDF_UINT,
        phase: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetFlat(page: HPDF_Page, flatness: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetExtGState(page: HPDF_Page, ext_gstate: HPDF_ExtGState) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetShading(page: HPDF_Page, shading: HPDF_Shading) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_GSave(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_GRestore(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Concat(
        page: HPDF_Page,
        a: HPDF_REAL,
        b: HPDF_REAL,
        c: HPDF_REAL,
        d: HPDF_REAL,
        x: HPDF_REAL,
        y: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_MoveTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_LineTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_CurveTo(
        page: HPDF_Page,
        x1: HPDF_REAL,
        y1: HPDF_REAL,
        x2: HPDF_REAL,
        y2: HPDF_REAL,
        x3: HPDF_REAL,
        y3: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_CurveTo2(
        page: HPDF_Page,
        x2: HPDF_REAL,
        y2: HPDF_REAL,
        x3: HPDF_REAL,
        y3: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_CurveTo3(
        page: HPDF_Page,
        x1: HPDF_REAL,
        y1: HPDF_REAL,
        x3: HPDF_REAL,
        y3: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ClosePath(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Rectangle(
        page: HPDF_Page,
        x: HPDF_REAL,
        y: HPDF_REAL,
        width: HPDF_REAL,
        height: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Stroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ClosePathStroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Fill(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Eofill(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_FillStroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_EofillStroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ClosePathFillStroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ClosePathEofillStroke(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_EndPath(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Clip(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Eoclip(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_BeginText(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_EndText(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetCharSpace(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetWordSpace(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetHorizontalScalling(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetTextLeading(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetFontAndSize(
        page: HPDF_Page,
        font: HPDF_Font,
        size: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetTextRenderingMode(
        page: HPDF_Page,
        mode: HPDF_TextRenderingMode,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetTextRise(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetTextRaise(page: HPDF_Page, value: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_MoveTextPos(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_MoveTextPos2(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetTextMatrix(
        page: HPDF_Page,
        a: HPDF_REAL,
        b: HPDF_REAL,
        c: HPDF_REAL,
        d: HPDF_REAL,
        x: HPDF_REAL,
        y: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_MoveToNextLine(page: HPDF_Page) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ShowText(page: HPDF_Page, text: *const ::std::os::raw::c_char) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ShowTextNextLine(
        page: HPDF_Page,
        text: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ShowTextNextLineEx(
        page: HPDF_Page,
        word_space: HPDF_REAL,
        char_space: HPDF_REAL,
        text: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetGrayFill(page: HPDF_Page, gray: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetGrayStroke(page: HPDF_Page, gray: HPDF_REAL) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetRGBFill(
        page: HPDF_Page,
        r: HPDF_REAL,
        g: HPDF_REAL,
        b: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetRGBStroke(
        page: HPDF_Page,
        r: HPDF_REAL,
        g: HPDF_REAL,
        b: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetCMYKFill(
        page: HPDF_Page,
        c: HPDF_REAL,
        m: HPDF_REAL,
        y: HPDF_REAL,
        k: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetCMYKStroke(
        page: HPDF_Page,
        c: HPDF_REAL,
        m: HPDF_REAL,
        y: HPDF_REAL,
        k: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Shading_New(
        pdf: HPDF_Doc,
        type_: HPDF_ShadingType,
        colorSpace: HPDF_ColorSpace,
        xMin: HPDF_REAL,
        xMax: HPDF_REAL,
        yMin: HPDF_REAL,
        yMax: HPDF_REAL,
    ) -> HPDF_Shading;
}
extern "C" {
    pub fn HPDF_Shading_AddVertexRGB(
        shading: HPDF_Shading,
        edgeFlag: HPDF_Shading_FreeFormTriangleMeshEdgeFlag,
        x: HPDF_REAL,
        y: HPDF_REAL,
        r: HPDF_UINT8,
        g: HPDF_UINT8,
        b: HPDF_UINT8,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_ExecuteXObject(page: HPDF_Page, obj: HPDF_XObject) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_New_Content_Stream(page: HPDF_Page, new_stream: *mut HPDF_Dict)
        -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Insert_Shared_Content_Stream(
        page: HPDF_Page,
        shared_stream: HPDF_Dict,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_DrawImage(
        page: HPDF_Page,
        image: HPDF_Image,
        x: HPDF_REAL,
        y: HPDF_REAL,
        width: HPDF_REAL,
        height: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Circle(
        page: HPDF_Page,
        x: HPDF_REAL,
        y: HPDF_REAL,
        ray: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Ellipse(
        page: HPDF_Page,
        x: HPDF_REAL,
        y: HPDF_REAL,
        xray: HPDF_REAL,
        yray: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_Arc(
        page: HPDF_Page,
        x: HPDF_REAL,
        y: HPDF_REAL,
        ray: HPDF_REAL,
        ang1: HPDF_REAL,
        ang2: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_TextOut(
        page: HPDF_Page,
        xpos: HPDF_REAL,
        ypos: HPDF_REAL,
        text: *const ::std::os::raw::c_char,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_TextRect(
        page: HPDF_Page,
        left: HPDF_REAL,
        top: HPDF_REAL,
        right: HPDF_REAL,
        bottom: HPDF_REAL,
        text: *const ::std::os::raw::c_char,
        align: HPDF_TextAlignment,
        len: *mut HPDF_UINT,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_Page_SetSlideShow(
        page: HPDF_Page,
        type_: HPDF_TransitionStyle,
        disp_time: HPDF_REAL,
        trans_time: HPDF_REAL,
    ) -> HPDF_STATUS;
}
extern "C" {
    pub fn HPDF_ICC_LoadIccFromMem(
        pdf: HPDF_Doc,
        mmgr: HPDF_MMgr,
        iccdata: HPDF_Stream,
        xref: HPDF_Xref,
        numcomponent: ::std::os::raw::c_int,
    ) -> HPDF_OutputIntent;
}
extern "C" {
    pub fn HPDF_LoadIccProfileFromFile(
        pdf: HPDF_Doc,
        icc_file_name: *const ::std::os::raw::c_char,
        numcomponent: ::std::os::raw::c_int,
    ) -> HPDF_OutputIntent;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
